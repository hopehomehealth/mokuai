<?php/** * Class user_model */class member_model extends Lowxp_Model{    public $baseTable = '###_member';    public $rankTable = '###_member_rank';    function __construct(){}    //返回帐户明细类型    function stages($type=''){        $stages = array(            ACT_SAVING => array('key'=>ACT_SAVING, 'title'=>'帐户充值'),            ACT_DRAWING => array('key'=>ACT_DRAWING, 'title'=>'帐户提款'),            ACT_CHANGE => array('key'=>ACT_CHANGE, 'title'=>"兑换".$this->L['unit_db_points'].""),            ACT_ADJUSTING => array('key'=>ACT_ADJUSTING, 'title'=>'调节帐户'),            ACT_DB => array('key'=>ACT_DB, 'title'=>$this->L['unit_yun']),            ACT_ORDER => array('key'=>ACT_ORDER, 'title'=>'下单'),            ACT_OTHER => array('key'=>ACT_OTHER, 'title'=>'其他类型'),            ACT_RCGCMS => array('key'=>ACT_RCGCMS, 'title'=>'充值佣金'),            ACT_IVTREG => array('key'=>ACT_IVTREG, 'title'=>'邀请奖励'),            ACT_ACT => array('key'=>ACT_ACT, 'title'=>'任务领取'),            ACT_DOP => array('key'=>ACT_DOP, 'title'=>'扣除冻结款'),            ACT_LOGIN => array('key'=>ACT_LOGIN, 'title'=>'每日登陆'),			ACT_OFFSHELF => array('key'=>ACT_OFFSHELF, 'title'=>"".$this->L['unit_db_points']."商品下架"),            ACT_PLATE => array('key'=>ACT_PLATE, 'title'=>'大转盘'),        	ACT_BAODAN => array('key'=>ACT_BAODAN, 'title'=>'线下报单'),            ACT_CARD => array('key'=>ACT_CARD, 'title'=>'充值卡'),            ACT_ZHIGOU => array('key'=>ACT_ZHIGOU, 'title'=>'直购'),            ACT_OFFSHELF => array('key'=>ACT_OFFSHELF, 'title'=>'云购商品下架'),            ACT_BAODAN => array('key'=>ACT_BAODAN, 'title'=>'线下报单'),        );        return $type?$stages[$type]['title']:$stages;    }    //添加会员等级    function rank_save(){        $post = $_POST['post'];        $id = intval($_POST['id']);        #表单处理        if(empty($post['rank_name'])){ return array('code'=>10001, 'message'=>'请输入会员等级名称!'); }        #重复处理        $where = $id ? ' and id!='.$id : '';        $res = $this->db->select("select * from ".$this->rankTable." where rank_name='".$post['rank_name']."'".$where);        if($res){ return array('code'=>10003, 'message'=>'会员等级已经存在，请更换!'); }        #初始值        $post['min_points'] = intval($post['min_points']);        $post['max_points'] = intval($post['max_points']);        #保存        $where = $id ? array('id'=>(int) $id) : '';        $res = $this->db->save($this->rankTable,$post,'',$where);        if(empty($res)){ return array('code'=>10002, 'message'=>'数据操作失败!'); } //未知错误        if($id){            admin_log('编辑会员等级：'.$post['rank_name']);            return array('code'=>0, 'type'=>'update', 'message'=>'更新成功');        }        else{            admin_log('添加会员等级：'.$post['rank_name']);            return array('code'=>0, 'type'=>'insert', 'message'=>'添加成功');        }    }    #添加一个用户    function create_user($input){        if(empty($input['username'])) return array('code'=>10001, 'message'=>'请输入用户名!');        if($this->check_username($input['username'])) return array('code'=>10001, 'message'=>'用户名已存在!');        //if(empty($input['email'])) return array('code'=>10001, 'message'=>'请输入电子邮箱!');        //if(empty($input['psw'])||empty($input['cfmpsw'])) return array('code'=>10001, 'message'=>'请输入登录密码!');        //if(trim($input['psw'])!=trim($input['cfmpsw'])) return array('code'=>10001, 'message'=>'两次输入的密码不一致!');        $salt = substr(uniqid(rand()), -6);        $hash_pass = $this->get_salt_hash($input['password'], $salt);        $pay_pass = $this->get_salt_hash($input['pay_password'], $salt);        $r = $this->db->insert($this->baseTable,array(            'rank_id' =>isset($input['rank_id']) ? intval($input['rank_id']) : 0,            'username' =>addslashes($input['username']),            'nickname' =>isset($input['nickname']) ? $input['nickname'] : '',            'realname' =>isset($input['realname']) ? $input['realname'] : '',            'photo' =>isset($input['photo']) ? $input['photo'] : '',            'sex' =>isset($input['sex']) ? intval($input['sex']) : 1,            'email' =>isset($input['email']) ? trim($input['email']) : '',            'zone' =>isset($input['zone']) ? end($input['zone']) : '',            'address' =>isset($input['address']) ? trim($input['address']) : '',            'status' =>isset($input['status']) ? intval($input['status']) : 1,            'birthday' =>isset($input['birthday']) ? trim($input['birthday']) : '',            'mobile' =>isset($input['mobile']) ? trim($input['mobile']) : '',            'ivt_id' =>isset($input['ivt_id']) ? $input['ivt_id'] : 0,            'oauth_login' =>isset($input['oauth_login']) ? $input['oauth_login'] : '',            'openid' =>isset($input['openid']) ? $input['openid'] : '',            'unionid' =>isset($input['unionid']) ? $input['unionid'] : '',            'is_voice' =>1,			'pay_points'=>isset($input['pay_points']) ? $input['pay_points'] :0,        	'db_points'=>isset($input['db_points']) ? $input['db_points'] : 0,            'password' =>$hash_pass,            'pay_password' =>$pay_pass,            'salt'     =>$salt,            'c_time'   =>RUN_TIME,            'lastlogin'=>RUN_TIME,            'ip'=>getIP(),            'lastip'=>getIP(),            'verify_mobile'=>isset($input['verify_mobile'])?intval($input['verify_mobile']):0,        ));        admin_log('添加会员：'.$input['username']);        return $r            ? array(                'mid' => $r,                'username' => $input['username'],                'code' =>'0',                'message' => '添加成功'            ) : $r;    }    /**     * 更新会员     */    function update_user($input){        $update_arr = array();        if(isset($input['verify_mobile'])){ #更新手机状态            $update_arr =  array(                'verify_mobile' =>intval($input['verify_mobile']),            );        }else{            $update_arr =  array(                'rank_id' =>intval($input['rank_id']),                'nickname' =>$input['nickname'],                'realname' =>$input['realname'],                'sex' =>intval($input['sex']),                'email' =>trim($input['email']),                'zone' =>end($input['zone']),                'address' =>trim($input['address']),                'birthday' =>trim($input['birthday']),                'mobile' =>trim($input['mobile']),                'idcard' =>trim($input['idcard']),            );            if(isset($input['status'])){                $update_arr['status'] = intval($input['status']);            }        }        if(!empty($input['password']) && !empty($input['cfmpassword'])){            $salt = $this->db->getstr("SELECT salt FROM ###_member WHERE mid = '$input[mid]'");            if(trim($input['password'])!=trim($input['cfmpassword'])) return array('code'=>10001, 'message'=>'两次输入的密码不一致!');            $update_arr['password'] = $this->get_salt_hash($input['password'], $salt);        }        if(!empty($input['pay_password']) && !empty($input['cfmpay_password'])){            $salt = $this->db->getstr("SELECT salt FROM ###_member WHERE mid = '$input[mid]'");            if(trim($input['pay_password'])!=trim($input['cfmpay_password'])) return array('code'=>10001, 'message'=>'两次输入的支付密码不一致!');            $update_arr['pay_password'] = $this->get_salt_hash($input['pay_password'], $salt);        }        admin_log('编辑会员：'.$input['username']);        $r = $this->db->update($this->baseTable,$update_arr,"mid = '$input[mid]'");        return $r            ? array(                'code' =>'0',                'message' => '更新成功',            ) : $r;    }    /**     * 检查用户名唯一性     */    function check_username($username){        $member = $this->db->get("SELECT * FROM `".$this->baseTable."` WHERE `username` = '".addslashes($username)."'");        return $member;    }    /** 登录（执行）     * @param $user     * @param int $un_login     */    function setLogin($user, $un_login = 0){        #更新在线日志        $this->session->login($user['mid'], $un_login);        $_SESSION['mid']      = $user['mid'];        $_SESSION['username'] = $user['username'];        #每天登录加一次经验值        if(!$this->db->getstr("SELECT COUNT(mid) FROM ###_account_log WHERE mid=".$_SESSION['mid']." AND stage='".ACT_LOGIN."' AND logtime>".strtotime(date('Y-m-d')))){            $this->accountlog(ACT_LOGIN,array('rank_points'=>5,'desc'=>'每日登录获得经验值'));        }        $cart_str = !empty($_POST['cart']) ? $_POST['cart'] : cookie('yuncart');        //登录后合并购物车        if($cart_str){            if (get_magic_quotes_gpc()) $cart_str = stripslashes($cart_str);//去除斜杠            $cart_str = base64_decode($cart_str);            $cookie_cart = unserialize($cart_str);            if(!empty($cookie_cart)){                foreach($cookie_cart as $goods){                    //判断是否在购物车                    $cartgoods = $this->db->get("SELECT * FROM ###_yuncart WHERE mid = '$_SESSION[mid]' AND buy_id = '$goods[buy_id]'");                    $row = $this->db->get("SELECT * FROM ###_yunbuy WHERE buy_id = '$goods[buy_id]'");                    if(empty($row)) continue;                    if($cartgoods){                        $qty = $cartgoods['qty']+$goods['qty']>$row['need_num'] ?  $row['need_num'] : $cartgoods['qty']+$goods['qty'];                        $this->db->update('###_yuncart',array('qty'=>$qty,'subtotal'=>$qty*$row['price']),array('mid'=>$_SESSION['mid'],'buy_id'=>$goods['buy_id']));                    }else{                        $cart['buy_id'] = $goods['buy_id'];                        $cart['goods_name'] = $goods['goods_name'];                        $cart['cover'] = $goods['cover'];                        $cart['mid'] = $_SESSION['mid'];                        $cart['qishu'] = $goods['qishu'];                        $cart['qty'] = $goods['qty'];                        $cart['goods_price'] = $goods['goods_price'];                        $cart['price'] = $goods['price'];                        $cart['type'] = $goods['type'];                        $cart['subtotal'] = $goods['price']*$goods['qty'];                        $this->db->insert('###_yuncart',$cart);                    }                }            }            zzcookie('yuncart','');        }        $this->add_login_log($user);    }    /**     * 增加用户登录记录     */    function add_login_log($user) {        $this->db->update($this->baseTable,"login_time=login_time+1,lastip=ip,`ip`='".getIP()."',`lastlogin`=login,`login`='".RUN_TIME."'","mid = '$user[mid]' AND is_robots=0");    }    /**     * 获取加密的密码full_cut     *     * @param $password     * @param $salt     * @param string $gsalt     * @return string     */    public function get_salt_hash($password, $salt, $gsalt='scYltK') {        $passwordmd5 = preg_match('/^\w{32}$/', $password) ? $password : md5($password);        return md5($passwordmd5.$salt.$gsalt);    }    /**     * 修改密码     * @param $oldpass     * @param $newpass     * @param $uid     * @return int     */    function alter_pass($oldpass,$newpass,$uid,$field='password'){        $user = $this->db->query("SELECT * FROM `".$this->baseTable."` WHERE `mid` = '".intval($uid)."'")->row_array();        if(!isset($user['mid'])){            return -1;#不存在该用户        }elseif($user[$field] != $this->get_salt_hash($oldpass, $user['salt']) && $this->is_wechat!=1){            return -2;#密码错误        }else{            $setPass = $this->get_salt_hash($newpass,$user['salt']);            $this->db->update('member',array(                $field=>$setPass            ),array('mid'=>intval($uid)));            return $user['mid'];        }    }    #检查登录    public function check_login($username, $password){        $user = $this->db->query("SELECT * FROM `".$this->baseTable."` WHERE `username` = '".addslashes($username)."'")->row_array();        if(empty($user['email'])){            return -1;#不存在该邮箱        }elseif($user['password'] != $this->get_salt_hash($password, $user['salt'])){            return -2;#密码错误        }        return $user;    }    /**     * 保存认证身份证     */    function verify_idcard_save($input){        if($input['id']){            $id = $input['id'];            unset($input['id']);            admin_log('编辑验证身份证：'.$input['username']);            $r = $this->db->update('verify_idcard',$input,array('id'=>$id));        }else{            admin_log('添加验证身份证：'.$input['username']);            $r = $this->db->insert('verify_idcard',$input);        }        return $r;    }    /**     * 会员收货地址     */    function member_address($mid){        $address = $this->db->select("SELECT * FROM `###_member_address` WHERE `mid` = '".$mid."' ORDER BY is_default DESC");        return $address;    }    /**     * 会员收货地址编辑     */    function member_address_save($input){        if($input['id']){            $id = $input['id'];            unset($input['id']);            $r = $this->db->update('member_address',$input,array('id'=>$id));        }else{            $r = $this->db->insert('member_address',$input);        }        return $r;    }    /**     * 会员银行账号     */    function bankcard($mid){        $bankcard = $this->db->select("SELECT * FROM `###_member_bankcard` WHERE `mid` = '".$mid."'");        return $bankcard;    }    /**     * 会员银行账号编辑     */    function bankcard_save($input){        if($input['id']){            $id = $input['id'];            unset($input['id']);            $r = $this->db->update('member_bankcard',$input,array('id'=>$id));        }else{            $r = $this->db->insert('member_bankcard',$input);        }        return $r;    }    /**     * 佣金     */    function save_commission($input){        $input['addtime'] = RUN_TIME;        $this->db->insert('commission',$input);        //更新会员佣金        $this->db->update('member',"commission = commission + $input[commission]",array('mid'=>$input['mid']));    }    /**     * 佣金提现手续费     */    function commission_fee($amount){        $result = array();        switch($amount){            case $amount<=200:                $result['fee'] = $amount*0.08;                break;            case 200<$amount && $amount<=500:                $result['fee'] = $amount*0.05;                break;            case 500<$amount && $amount<=800:                $result['fee'] = $amount*0.05;                $result['sales_tax'] = $amount*0.056;                break;            case 800<$amount && $amount<=1000:                $result['fee'] = $amount*0.05;                $result['sales_tax'] = $amount*0.056;                $result['income_tax'] = $amount*0.03;                break;            case 1000<$amount && $amount<=4000:                $result['fee'] = $amount*0.05;                $result['sales_tax'] = $amount*0.056;                $result['income_tax'] = ($amount-800)*0.2;                break;        }        $result['amount'] = $amount-$result['fee']-$result['sales_tax']-$result['income_tax'];        return $result;    }    /**     * 提现/充值记录     */    function member_account_save($input){        if($input['id']){            $id = $input['id'];            unset($input['id']);            admin_log('编辑充值/提现记录：'.$input['username']);            $r = $this->db->update('member_account',$input,array('id'=>$id));        }else{            $input['add_time'] = RUN_TIME;            admin_log('添加充值/提现记录：'.$input['username']);            $r = $this->db->insert('member_account',$input);        }        return $r            ? array(                'code' =>'0',                'message' => '操作成功',            ) : $r;    }    /**     * 会员信息     */    function member_info($id,$filed='*'){        $member = $this->db->get("SELECT $filed FROM ".$this->baseTable." WHERE mid = '$id'");        if(!empty($member)) $member['defaultPic'] = '/upload/' . (($member['sex'] == 1) ? 'man' : 'woman') . '.png';        return $member;    }    /**     * 会员退出     */    function logout(){        $this->session->logout();    }    /**     * 账户日志     * 冻结余额时可用相应进行调整     */    function accountlog($stage='admin',$input){        global $lowxp;        $log_arr = array();        $log_arr['mid'] = $input['mid']?$input['mid']:$_SESSION['mid'];        $member = $this->db->get("SELECT * FROM ###_member WHERE mid = '$log_arr[mid]'");		        $log_arr['username'] = $log_arr['mid']==$_SESSION['mid'] ? $_SESSION['username'] : $this->db->getstr("SELECT username FROM ###_member WHERE mid = '$log_arr[mid]'");        $log_arr['stage'] = $stage;        $log_arr['desc'] = $input['desc'];        $log_arr['logtime'] = RUN_TIME;        $log_arr['pay_points']=$logs['pay_points']=isset($input['pay_points'])?$input['pay_points']:0;        $log_arr['rank_points']=$logs['rank_points']=isset($input['rank_points'])?$input['rank_points']:0;        $log_arr['db_points']=$logs['db_points']=isset($input['db_points'])?$input['db_points']:0;        $log_arr['frozen_money']=$logs['frozen_money']=isset($input['frozen_money'])?$input['frozen_money']:0;        $log_arr['user_money']=$logs['user_money']=isset($input['user_money'])?$input['user_money']:0;        $log_arr['give_money']=isset($input['give_money'])?$input['give_money']:0;        //$log_arr['pay_money']=$logs['pay_money']=isset($input['pay_money'])?$input['pay_money']:0;        $log_arr['amount']=isset($input['amount'])?$input['amount']:0;		        $set_arr = array();        foreach($logs as $k=>$v){            if($v<0 && $member[$k]<abs($v)){                $log_arr[$k] = $v = 0;                $log_arr['desc'] = '系统提示：'.$k.' 不够扣除！';                return array(                    'code' =>'1',                    'message' => '更新失败',                );            }            $set_arr[] = "$k = $k+('$v')";        }        //记录日志        $this->db->insert('###_account_log',$log_arr);        //更新会员账户        $sql = "SELECT a.username,a.rank_points,a.rank_id,b.special FROM ".$this->baseTable." AS a " .            "LEFT JOIN ###_member_rank AS b ON a.rank_id=b.id " .            "WHERE mid=".$log_arr['mid'];        $member = $this->db->get($sql);        #更新会员等级        if(empty($member['special']) && $log_arr['rank_points']>0){            $rank_points = $member['rank_points'] + $log_arr['rank_points'];            $sql = "SELECT id FROM ###_member_rank WHERE min_points<='".$rank_points."' AND max_points>'".$rank_points."'";            $set_arr[] = "rank_id = " . (int) $this->db->getstr($sql);        }        $r = $this->db->update($this->baseTable,implode(',',$set_arr),"mid = '$log_arr[mid]'");        return $r            ? array(                'code' =>'0',                'message' => '更新成功',            ) : $r;    }    //访客列表    function visitList($size,$page,$mid,$options=array()){        #分页        $this->load->model('page');        $_GET['page'] = intval($page);        $this->page->set_vars(array('per'=>$size));        $sql = "SELECT * FROM ###_member_visit WHERE mid1=".$mid." ORDER BY lasttime DESC";        $urlQuery = isset($options['url']) ? $options['url'] : "";        $res = $this->page->hashQuery($sql, $urlQuery)->result_array();        $res = $this->db->lJoin($res,'member','mid,photo,username,nickname,intro,rank_points','mid2','mid');        return $res;    }    //好友列表    function friList($size,$page,$mid,$options=array()){        #分页        $this->load->model('page');        $_GET['page'] = intval($page);        $this->page->set_vars(array('per'=>$size));        $sql = "SELECT * FROM ###_member_fri WHERE mid2=".$mid." ORDER BY c_time DESC";        $urlQuery = isset($options['url']) ? $options['url'] : "";        $res = $this->page->hashQuery($sql, $urlQuery)->result_array();        $res = $this->db->lJoin($res,'member','mid,photo,username,nickname,intro,rank_points','mid1','mid');        return $res;    }    //判断是否为好友关系    function isFri($mid1,$mid2){        if(!$mid1 || !$mid2) return false;        $sql = "SELECT COUNT(mid1) FROM ###_member_fri WHERE mid1=".$mid1." AND mid2=".$mid2;        return $this->db->getstr($sql);    }    //添加/解除好友    function addFri($mid1,$mid2){        if(!$mid1 || !$mid2) return false;        $isfri = $this->isFri($mid1,$mid2);        if($isfri > 0){ #解除好友            $this->db->delete('member_fri',"mid1=".$mid1." AND mid2=".$mid2);            return 2;        }else{ #添加好友            $this->db->save('member_fri',array(                'mid1' => $mid1,                'mid2' => $mid2,                'c_time' => time()            ));            return 1;        }    }    //获取推荐人数    function itvCount($mid, $options=array()){        $where = isset($options['where']) ? $options['where'] : '';        $ivt_count = $this->db->getstr("SELECT count(mid) FROM ###_member WHERE ivt_id='".$mid."' $where");        return $ivt_count;    }    //注册成功后处理...    function regGive($mid){        //注册赠送积分或夺宝币        $pay_log = array();        if(isset($this->site_config['gift_money'])&&(int) $this->site_config['gift_money']>0){            $pay_log['pay_points'] = (int) $this->site_config['gift_money'];        }        if(isset($this->site_config['gift_db_points'])&&(int) $this->site_config['gift_db_points']>0){            $pay_log['db_points'] = (int) $this->site_config['gift_db_points'];        }        //注册赠送抵用券        if(isset($this->site_config['gift_bonus'])&&((int) $this->site_config['gift_bonus']>0)){            $number = ceil((int) $this->site_config['gift_bonus']/1);            $this->load->model('bonus');            $this->bonus->send(array(                'mid'  => $mid,                'desc' => "注册赠送".$this->L['unit_bonus'],                'number' => $number,                'money' => 1,            ));        }        //写入会员资金明细        if(!empty($pay_log)) {            $pay_log['mid'] = $mid;            $pay_log['desc'] = '注册赠送';            $this->load->model('member');            $this->member->accountlog(ACT_REG,$pay_log);        }    }        //app登录成功后处理...    function applogin($mid){        $login_app=$this->site_config['login_app'];        $login_app_number=$this->site_config['login_app_number'];                //app第一次登录积分或夺宝币        $pay_log = array();                if($login_app==0){//兑换券            if(isset($this->site_config['login_app_number'])&&((int) $this->site_config['login_app_number']>0)){                $number = ceil((int) $this->site_config['login_app_number']/1);                $this->load->model('bonus');                $this->bonus->send(array(                    'mid'  => $mid,                    'desc' => "app第一次登录赠送".$this->L['unit_bonus'],                    'number' => $number,                    'money' => 1,                ));            }        }elseif ($login_app==1){            if(isset($this->site_config['login_app_number'])&&(int) $this->site_config['login_app_number']>0){                $pay_log['pay_points'] = (int) $this->site_config['login_app_number'];            }        }else{            if(isset($this->site_config['login_app_number'])&&(int) $this->site_config['login_app_number']>0){                $pay_log['db_points'] = (int) $this->site_config['login_app_number'];            }        }        //写入会员资金明细        if(!empty($pay_log)) {            $pay_log['mid'] = $mid;            $pay_log['desc'] = 'app第一次登录赠送';            $this->load->model('member');            $this->member->accountlog('login',$pay_log);        }    }    /** 分销等级名称     * @param $level     * @return string     */    function ivtLevelName($level){        $array = array(            1 => array('title'=>'金牌团队'),            2 => array('title'=>'银牌团队'),            3 => array('title'=>'铜牌团队'),        );        if($array[$level]){            return $array[$level]['title'];        }else{            return num2char($level).'级分销';        }    }    /**     * 获取留言ID所有上下级ID     * @param $id     * @return mixed     */    function get_msg_ids($id){        static $ids = '';        return $ids;    }}