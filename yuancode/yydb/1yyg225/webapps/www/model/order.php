<?php/** * Class user_model */class order_model extends Lowxp_Model{    public static $orderStatus = array(        '1'=>'未付款',        '2'=>'已付款',        '3'=>'已发货',        '4'=>'已完成',        '5'=>'已取消',        '6'=>'改价格',        '7'=>'已备货',    );    public static $willDoStatus = array(        '2'=>'待发货',        '3'=>'待收货',        '4'=>'待评价',        '5'=>'无',        '6'=>'无',        '7'=>'待发货'    );    public static $orderCode = array(        CART_WIN=>array('竞拍中奖','/auction/view/%s'),        CART_AUC=>array('竞拍最高价','/auction/view/%s'),    	CART_DB =>array('一元云购','/yunbuy/detail/%s'),        CART_BUY =>array('直购商品','/yunbuy/detail/%s')    );    public $goodsForm = array(        'tmall'   =>array('title'=>'天猫','url'=>'http://taobao.com'),        'jd'      =>array('title'=>'京东','url'=>'http://jd.com'),        'off'     =>array('title'=>'线下','url'=>''),        'other'   =>array('title'=>'其它','url'=>''),    );    function __construct(){        //使用语言包        self::$orderCode[CART_WIN][0] = $this->L['unit_pay'].$this->L['unit_winning'];        self::$orderCode[CART_AUC][0] = $this->L['unit_pay'].'最高价';        self::$orderCode[CART_DB][0] = $this->L['unit_yun_one'];        self::$orderCode[CART_BUY][0] = $this->L['unit_go_buy'].'商品';    }    /**获取goodsForm     * @param $key     * @return array     */    function getGoodsForm($key='',$value=''){        if($this->goodsForm[$key]){            if($this->goodsForm[$key][$value]){                return $this->goodsForm[$key][$value];            }else{                return $this->goodsForm[$key];            }        }else{            return $this->goodsForm;        }    }    //保存数据    function save(){        $post = $_POST['post'];        $id = intval($_POST['id']);        #表单处理        //if(empty($post['cat_type'])){ return array('code'=>10001, 'message'=>'请选择竞拍商品分类!'); }        if($this->base->validate($post['oldprice'],'number')==false || trim($post['oldprice']) < 0){            return array('code'=>10001, 'message'=>'成本价为大于等于0的数字!');        }        #保存        if($id){            $res = $this->db->save('goods_order',$post,'',array('id'=>$id));            admin_log('编辑订单信息：'.$post['order_sn']);            return array('code'=>0, 'type'=>'update', 'message'=>'更新成功');        }    }    /**     * 读取每个订单的商品列表     * @param $data     * @param array $params     * @return mixed     */    function unionOrderGoods($data,$params = array()){        static $orderStatus = array(            '1'=>'待买家付款',            '2'=>'买家已付款',            '3'=>'已发货',            '4'=>'交易完成',            '5'=>'订单已取消',            '7'=>'备货中',        );        $orderIds = array();        foreach($data as $v)$orderIds[] = $v['id'];        if(count($orderIds)==0)return $data;        $this->load->model('upload');        $this->load->model('yunbuy');        $this->load->model('virtual');        //商家订单筛选        $items = array();        $bus_mid = isset($params['bus_mid']) ? (int) $params['bus_mid'] : 0;        if ($bus_mid) {            $items = $this->db->select("SELECT goi.* FROM goods_order_item AS goi ".                "LEFT JOIN ###_goods AS g ON g.id=goi.good_id ".                "WHERE g.mid='$bus_mid' AND goi.order_id IN(".implode(',',$orderIds).")");        } else {            $items = $this->db->select("SELECT * FROM goods_order_item WHERE order_id IN(".implode(',',$orderIds).")");        }        foreach($items as $k=>$v){            //虚拟商品获取卡密            $v['virtual_list'] = $v['virtual'] ? $this->virtual->getVirtual($v['id']) : array();            $items[$k] = $v;        }        $items = $this->db->lJoin($items,'goods','id,cover,price,`desc`,thumb,thumbs,mid','good_id','id','goods_');        $items = $this->db->lJoin($items,'business','mid,bus_name','goods_mid','mid');        $items = $this->db->lJoin($items,'express','id,name,pinyin','item_express','id','express_');        $orderItems = array();        foreach($items as $k=>$v){            $v['thumb'] = $v['goods_thumb'];            $v['thumbs'] = $v['goods_thumbs'];            $v = $this->yunbuy->getThumb($v,1,array('thumb'));            if($v['from_id']){                $v['goods_url'] = sprintf(self::$orderCode[CART_BUY][1],$v['from_id']);            }            if(!isset($orderItems[$v['order_id']]))$orderItems[$v['order_id']] = array();            if($v['goods_mid']){                $v['item_status_name'] = $orderStatus[$v['item_status']];            }            $orderItems[$v['order_id']][] = $v;        }        $items = $this->upload->getImgUrls($items,'goods_cover','gallery',array('thumb'));        foreach($data as $key=>$val){            if(isset($orderItems[$val['id']])){                $data[$key]['goods'] = $orderItems[$val['id']];            }else{                $data[$key]['goods'] = array();            }            // 商家中心覆盖物流            if($bus_mid && $data[$key]['goods'][0]['item_express']) {                $data[$key]['express'] = $data[$key]['goods'][0]['item_express'];                $data[$key]['express_num'] = $data[$key]['goods'][0]['item_express_num'];                $data[$key]['express_send_time'] = $data[$key]['goods'][0]['item_express_time'];                $data[$key]['status'] = $val['status'] = $data[$key]['goods'][0]['item_status'];            }            $data[$key]['status_name'] = $orderStatus[$val['status']];            $data[$key]['order_code'] = self::$orderCode[$val['extension_code']][0];            if($val['extension_code']==CART_DB){                $val['extension_id'] = $this->db->getstr("SELECT buy_id FROM ###_yundb WHERE id = $val[extension_id]");            }            elseif($val['extension_code']==CART_WIN){                $auction = $this->db->get("SELECT act_id,cod_time FROM ###_auction_log WHERE log_id = $val[extension_id]");                $val['extension_id'] = $auction['act_id'];                $data[$key]['cod_time'] = $auction['cod_time'];            }            elseif($val['extension_code']==CART_AUC){                $auction = $this->db->get("SELECT cod_time FROM ###_auction_log WHERE log_id = $val[extension_id]");                $data[$key]['cod_time'] = $auction['cod_time'];            }            elseif($val['extension_code']==CART_BUY){                //重新计算商家订单金额（直购）                if($bus_mid && $data[$key]['goods']){                    $order_price_bus = 0;                    foreach($data[$key]['goods'] as $v){                        $order_price_bus += $v['sell_price'] * $v['buy_num'];                    }                    $data[$key]['order_price'] = $order_price_bus;                }            }            $data[$key]['goods_url'] = RootUrl.sprintf(self::$orderCode[$val['extension_code']][1],$val['extension_id']);        }        $data = $this->db->lJoin($data,'member','mid,realname,username,nickname,mobile,status,is_voice','mid','mid','m_');        $data = $this->db->lJoin($data,'express','id,name,pinyin','express','id','express_');        $data = $this->db->lJoin($data,'share','id,order_id','id','order_id','share_');        return $data;    }    /**     * 修改订单状态     * @param $order_id     * @param $status     * @param $state_info     * @param array $params     * @return bool|string     */    function chageOrderState($order_id, $status, $state_info, $params = array()){        #$order = $this->db->get("SELECT id,status FROM goods_order WHERE id=".$order_id);        #if(!isset($order['id']))return '-10002';#订单不存在        if(!isset(self::$orderStatus[$status]))return '-10003';#订单状态不存在        $new_state = self::$orderStatus[$status];        $input = array(            'order_id'=>$order_id,            'status'=>$status,            'state'=>$new_state,            'from_state'=>isset(self::$willDoStatus[$status]) ? self::$willDoStatus[$status] : '',            'state_info'=>$state_info,            'c_time'=>RUN_TIME        );        if(isset($params['cancel_type'])){            $cancelReason = array(                '1'=>'缺货','2'=>'订单无效','3'=>'买家要求',            );            if($params['cancel_type']!='0' && isset($cancelReason[$params['cancel_type']])){                $input['state_info'] = $cancelReason[$params['cancel_type']];            }            $input['cancel_type'] = $params['cancel_type'];        }        $set = array('status'=>$status);        if(isset($params['amount'])){            $set['money_paid'] = $params['amount'];            $set['amount'] = 0;        }        $this->db->insert('goods_order_log',$input);        $this->db->update('goods_order',$set,array('id'=>$order_id));        //发货后，商家分润（条件：开启了商家功能，开启分润，自动结算）        if($status == 3){            $bus_mid = isset($params['bus_mid']) ? $params['bus_mid'] : 0;            $this->load->model('business');            $this->business->bus_commission($order_id,0,$bus_mid);        }        return true;    }    /**     * 调整价格记录     * @param $order_id     * @param $price     * @return bool     */    function chOrderPrice($order_id,$price){        $order = $this->db->get("SELECT id,amount FROM goods_order WHERE id=".$order_id);        if(!isset($order['id']))return -1;        $price = floatval($price);        $priceState = '6';        $new_state = self::$orderStatus[$priceState];        $from_state = self::$willDoStatus[$priceState];        $input = array(            'order_id'=>$order_id,            'status'=>$priceState,            'state'=>$new_state,            'from_state'=>$from_state,            'state_info'=>'价格从['.$order['order_price'].']改为['.$price.']',            'c_time'=>RUN_TIME        );        $this->db->insert('goods_order_log',$input);        $this->db->update('goods_order',array('amount'=>$price),array('id'=>$order_id));        return true;    }    /**     * 取消订单,对优惠券,积分的处理.     */    function cancelOrder($order_id){        //把订单中未使用的优惠券还给会员.        $memCoupon = $this->db->get("SELECT * FROM member_coupon WHERE order_id=".$order_id." AND status=1");        if(isset($memCoupon['id'])){            $this->db->update('member_coupon',array('status'=>'0'),array('id'=>$memCoupon['id']));        }        //把订单中未使用的积分还给会员.        $memCredit = $this->db->get("SELECT * FROM member_credit_log WHERE order_id=".$order_id." AND flag=3");        if(isset($memCredit['id'])){            $amount = $memCredit['amount'];            $this->db->delete('member_credit_log',array('id'=>$memCredit['id']));            $this->db->update('member','credit=credit+"'.$amount.'"',array('mid'=>$memCredit['mid']));        }    }    /**     * 完成订单,对优惠券,积分的处理.     * @param $order_id     */    function finishOrder($order_id){        //更新优惠券的使用状态        $memCoupon = $this->db->get("SELECT * FROM member_coupon WHERE order_id=".$order_id." AND status=1");        if(isset($memCoupon['id'])){            $this->db->update('member_coupon',array('status'=>'2'),array('id'=>$memCoupon['id']));        }        //把订单中未使用的积分还给会员.        $memCredit = $this->db->get("SELECT * FROM member_credit_log WHERE order_id=".$order_id." AND flag=3");        if(isset($memCredit['id'])){            $this->db->update('member_credit_log',array('flag'=>'2'),array('id'=>$memCredit['id']));        }        #更新销量        $this->db->update('goods','sell=sell+1',array('id'=>$order_id));    }    /** 获得订单信息     * @return  array     */    function flow_order_info()    {        $order = isset($_SESSION['flow_order']) ? $_SESSION['flow_order'] : array();        /* 初始化配送和支付方式 */        if (!isset($order['pay_id']))        {            $arr = $this->last_shipping_and_payment();            if (!isset($order['pay_id']))            {                $order['pay_id'] = intval($arr['pay_id']);            }        }        if (!isset($order['integral']))        {            $order['integral'] = 0; // 初始化积分        }        if (!isset($order['surplus']))        {            $order['surplus'] = 0;  // 初始化余额        }        if (!isset($order['deposit']))        {            $order['deposit'] = 0;  // 初始化冻结款        }        $order['extension_code'] = $_SESSION['extension_code'];        $order['extension_id'] = $_SESSION['extension_id'];        return $order;    }    /** 计算订单中费用信息     * @param $order     * @param $goods     */    function order_fee($order, $goods){        //初始化订单的扩展code        if (!isset($order['extension_code']))        {            $order['extension_code'] = '';        }        $total  = array(            'goods_price'      => 0,  //商品价格            'integral'         => 0,  //使用拍币            'surplus'          => 0,  //使用余额            'deposit'          => 0,  //使用冻结款            'pay_fee'          => 0,  //支付方式费用            'amount'           => 0,  //剩余付款金额        );        //商品总价        foreach($goods as $v){            $total['goods_price'] += $v['goods_price'];        }        //订单总额        $total['amount'] = $total['goods_price'];        //使用冻结款        $order['deposit'] = $order['deposit'] > 0 ? $order['deposit'] : 0;        if ($total['amount'] > 0)        {            if (isset($order['deposit']) && $order['deposit'] > $total['amount'])            {                $order['deposit'] = $total['amount'];                //$total['amount']  = 0;            }            else {                $total['amount'] -= floatval($order['deposit']);            }        }        else        {            $order['deposit'] = 0;            $total['amount']  = 0;        }        $total['deposit'] = $order['deposit'];        //使用拍币        $order['integral'] = $order['integral'] > 0 ? $order['integral'] : 0;        if ($total['amount'] > 0 && $order['integral'] > 0)        {            // 积分转金额，暂支持1比1            $integral_money = $order['integral'];            // 使用积分支付            $use_integral            = min($total['amount'], $integral_money); // 实际使用积分支付的金额            $total['amount']        -= $use_integral;            $total['integral']       = $use_integral;        }        else        {            $total['integral'] = 0;            $order['integral'] = 0;        }        $total['integral'] = $order['integral'];        //使用余额        $order['surplus'] = $order['surplus'] > 0 ? $order['surplus'] : 0;        if ($total['amount'] > 0)        {            if (isset($order['surplus']) && $order['surplus'] > $total['amount'])            {                $order['surplus'] = $total['amount'];                $total['amount']  = 0;            }            else            {                $total['amount'] -= floatval($order['surplus']);            }        }        else        {            $order['surplus'] = 0;            $total['amount']  = 0;        }        $total['surplus'] = $order['surplus'];        /* 保存订单信息 */        $_SESSION['flow_order'] = $order;        /* 支付费用 */        if (!empty($order['pay_id'])){            $this->load->model('payment');            $total['pay_fee'] = $this->payment->pay_fee($order['pay_id'], $total['amount'], 0);        }        #累加支付费用        $total['amount'] += $total['pay_fee'];        return $total;    }    /** 获得上一次用户采用的支付和配送方式     * @access  public     * @return  void     */    function last_shipping_and_payment()    {        $sql = "SELECT pay_id " .            " FROM ###_goods_order " .            " WHERE mid = '$_SESSION[mid]' " .            " ORDER BY id DESC LIMIT 1";        $row = $this->db->get($sql);        if (empty($row))        {            $row = array('pay_id' => 0);        }        return $row;    }}