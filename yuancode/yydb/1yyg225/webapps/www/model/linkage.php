<?php/** * Class linkage_model */class linkage_model extends Lowxp_Model {    private $baseTable = '###_linkage';    function __construct() {            }    //获取下一级联动菜单    function select($parentid = false) {        $where = ' WHERE lang=' . LANG_ID;        if ($parentid !== false) {            $parentid = (int) $parentid;            $where .= ' AND parentid=' . $parentid;        }        $array = $this->db->select("SELECT * FROM " . $this->baseTable . $where . " ORDER BY listorder,id");        $list = array();        foreach ($array as $v) {            $list[$v['id']] = $v;        }        return $list;    }    //获取单个信息    function get($id) {        $id = intval($id);        $where = ' WHERE lang=' . LANG_ID;        $sql = "SELECT * FROM " . $this->baseTable . $where . " AND id=" . $id;        return $this->db->get($sql);    }    //保存所有父类到数组    function parentArr($id) {        $arrparentid = 0;        $res = array();        if ($id) {            $res = $this->get($id);            $arrparentid = $res['arrparentid'];        }        $arrparentid = explode(',', $res ? ($arrparentid . ',' . $id) : 0);        return $arrparentid;    }    //保存数据    function save() {        $post = $_POST['post'];        $id = isset($post['id']) ? intval($post['id']) : 0;        #获取父级        $post['parentid'] = array_filter($post['parentid']);        $post['parentid'] = end($post['parentid']);        #表单处理        $post['name'] = trim($post['name']);        if (empty($post['name']))            return array('code' => 10001, 'message' => '请输入联动菜单名称!');        if ($id) {            #不能转移到自身或子级栏目下            $res = $this->db->get("select arrchildid from " . $this->baseTable . " where id='$id' AND lang=" . LANG_ID);            $child_arr = $this->base->explodeChar($res['arrchildid'], ',');            if (in_array($post['parentid'], $child_arr)) {                return array('code' => 10001, 'message' => '菜单转移失败，请重新选择上级联动菜单!');            }        }        if ($post['parentid'] == 0 && empty($post['mark'])) {            return array('code' => 10001, 'message' => '请输入一级菜单标识!');        }        #初始值        $post['mark'] = trim($post['mark']);        if (!$id) {            $post['lang'] = LANG_ID;        }        #处理批量栏目名        $names = array();        $array = $this->base->explodeChar($post['name'], "\n");        foreach ($array as $k => $v) {            if (trim($v)) {                $names[] = $v;                if ($post['parentid'] == 0)                    break;            }        }        #重复处理        $where = $post['id'] ? ' and id!=' . $id : '';        $where .= ' and lang=' . LANG_ID;        if ($post['parentid'] == 0) {            $res = $this->db->select("select id from " . $this->baseTable . " where mark='" . trim($post['mark']) . "'" . $where);            if ($res) {                return array('code' => 10003, 'message' => '菜单标识已经存在，请更换!');            }        }        #保存        $where = $id ? array('id' => (int) $id) : '';        $res = false;        $res_id = '';        foreach ($names as $v) {            $post['name'] = $v;            $res = $this->db->save($this->baseTable, $post, '', $where);        }        $this->repair();        $this->repair();        if (empty($res)) {            return array('code' => 10002, 'message' => '数据操作失败!');        } //未知错误        if ($id) {            admin_log('编辑联动菜单：' . implode(',', $names));            return array('code' => 0, 'type' => 'update', 'message' => '更新成功');        } else {            admin_log('添加联动菜单：' . implode(',', $names));            return array('code' => 0, 'type' => 'insert', 'message' => '添加成功');        }    }    #批量处理    function repair() {        @set_time_limit(500);        $this->linkage = $linkage = array();        $linkage = $this->db->select("select * from " . $this->baseTable . " where parentid=0 AND lang=" . LANG_ID);        $this->set_linkage($linkage);        if (is_array($this->linkage)) {            foreach ($this->linkage as $id => $cat) {                $this->linkage[$id]['arrparentid'] = $arrparentid = $this->get_arrparentid($id);                $this->linkage[$id]['arrchildid'] = $arrchildid = $this->get_arrchildid($id);                $child = is_numeric($arrchildid) ? 0 : 1;                $this->db->update($this->baseTable, array('arrparentid' => $arrparentid, 'arrchildid' => $arrchildid, 'child' => $child), array('id' => $id));            }        }    }    #递归输出所有菜单    function set_linkage($linkage = array()) {        if (is_array($linkage) && !empty($linkage)) {            foreach ($linkage as $id => $c) {                $this->linkage[$c['id']] = $c;                $r = $this->db->select("select * from " . $this->baseTable . " where parentid=" . $c['id'] . " AND lang=" . LANG_ID);                $this->set_linkage($r);            }        }        return true;    }    #重新获取所有父级    function get_arrparentid($id, $arrparentid = '') {        if (!is_array($this->linkage) || !isset($this->linkage[$id]))            return false;        $parentid = $this->linkage[$id]['parentid'];        $arrparentid = $arrparentid ? $parentid . ',' . $arrparentid : $parentid;        if ($parentid) {            $arrparentid = $this->get_arrparentid($parentid, $arrparentid);        } else {            $this->linkage[$id]['arrparentid'] = $arrparentid;        }        return $arrparentid;    }    #重新获取所有子级    function get_arrchildid($id) {        $arrchildid = $id;        if (is_array($this->linkage)) {            foreach ($this->linkage as $catid => $cat) {                if ($cat['parentid'] && $id != $catid) {                    $arrparentids = $this->base->explodeChar($cat['arrparentid'], ',');                    if (in_array($id, $arrparentids))                        $arrchildid .= ',' . $catid;                }            }        }        return $arrchildid;    }    #栏目子级筛选    function condArrchild($id) {        $res = $this->db->get('select arrchildid from ' . $this->baseTable . ' where id=' . $id);        return " IN(" . $res['arrchildid'] . ") ";    }    /** 获取联动面包屑     * @param $id     * @param $top 是否显示顶级     * @return string     */    function pos_linkage($id, $top = true,$sign=' > ') {        $str = '';        $list_linkage = $this->select();        $arrparentid = $list_linkage[$id]['arrparentid'];        $arrparentid = explode(',', $arrparentid . ',' . $id);        $arrparentid = array_filter($arrparentid);        $i = 0;        foreach ($arrparentid as $k => $v) {            if ($i == 0) {                if ($top) {                    $str .= $list_linkage[$v]['name'] . '(' . $list_linkage[$v]['mark'] . ')';                }            } else {                if (!$top && $i == 1) {                                    } else {                    $str .= $sign;                }                $str .= $list_linkage[$v]['name'];            }            $i++;        }        return $str;    }    /** 下拉联动效果     * @param $id 选择的联动ID     * @param $hideTop 是否隐藏一级     * @param $field 模型字段名     * @param $view 前台显示     */    function select_linkage($id, $hideTop = 0, $field = '', $view = false) {        $id = (int) $id;        $hideTop = (int) $hideTop;        $str = '';        $endid = '';        $name = 'post[parentid][]';        $default = '请选择';        if ($field) {            $name = "post[$field][]";        }        if ($view) {            $name = $field . "[]";        }        $arrparentid = $this->linkage->parentArr($id);        if ($arrparentid && $id != 0) {            $arrparentid = array_filter($arrparentid);        }        foreach ($arrparentid as $i => $pid) {            $endid = $pid;            $row = $this->linkage->get($pid);            if (($hideTop == 1 || $hideTop == 3) && $row['parentid'] == 0) {                continue;            }            $array = $this->linkage->select($row['parentid']);            if (empty($array))                continue;            $list = array();            foreach ($array as $k => $v) {                $list[$k] = $v['name'];            }            $str .= $this->form->select($list, $pid, 'name="' . $name . '" class="shop-select" onchange="linkage.chang_parent(this.value,' . $hideTop . ',\'' . $field . '\')"', $default, ($i > 0) ? $arrparentid[$i - 1] : '');        }        if ($id != 0 && $endid) {            $array = $this->linkage->select($endid);            $list = array();            foreach ($array as $k => $v) {                $list[$k] = $v['name'];            }            if (!empty($list)) {                if($hideTop==3 && !empty($arrparentid[3])){                }else{                    $str .= $this->form->select($list, 0, 'name="' . $name . '" onchange="linkage.chang_parent(this.value,' . $hideTop . ',\'' . $field . '\')"', $default);                }            }        }        return $str;    }    /**     * 获取所有linkage     */    public function getLinkage() {        $where = ' WHERE lang=' . LANG_ID;        $array = $this->db->select("SELECT * FROM " . $this->baseTable . $where . " ORDER BY listorder,id");        $arr = array();        foreach ($array as $row) {            if ($row['parentid'] == 0) {                continue;            }            $pid = explode(',', $row['arrparentid']);            if ($row['parentid'] == 1) {                $arr[(int) $row['id']]['id'] = $row['id'];                $arr[(int) $row['id']]['name'] = urlencode($row['name']);            } elseif (isset($pid[3])) {                $arr[(int) $pid[2]]['sub'][(int) $pid[3]]['sub'][(int) $row['id']]['name'] = urlencode($row['name']);                $arr[(int) $pid[2]]['sub'][(int) $pid[3]]['sub'][(int) $row['id']]['id'] = $row['id'];            } elseif (isset($pid[2])) {                $arr[(int) $pid[2]]['sub'][(int) $row['id']]['name'] = urlencode($row['name']);                $arr[(int) $pid[2]]['sub'][(int) $row['id']]['id'] = $row['id'];            }        }        $array = array_merge($arr);        foreach ($array as $key1 => $arr1) {            if (isset($array[$key1]['sub'])) {                $array[$key1]['sub'] = array_merge($array[$key1]['sub']);                foreach ($array[$key1]['sub'] as $key2 => $arr2) {                    if (isset($array[$key1]['sub'][$key2]['sub'])) {                        $array[$key1]['sub'][$key2]['sub'] = array_merge($array[$key1]['sub'][$key2]['sub']);                    }                }            }        }        return $array;    }    /**     * 通过area名称获取zone     * @param string $area     */    public function getZoneByArea($area) {        $name = explode(' ', $area);        if (isset($name[0]) && !empty($name[0])) {            $where = " WHERE name='{$name[0]}'";            $array = $this->db->select("SELECT * FROM " . $this->baseTable . $where . " ORDER BY id");            if (count($array) <=0 ){                return false;            }            $zone = $array[0]['id'];        } else {            return false;        }        $arrparentid = '0,1,'. $zone;        if (isset($name[1]) && !empty($name[1])) {            $where = " WHERE name='{$name[1]}' and arrparentid='{$arrparentid}'";            $array = $this->db->select("SELECT * FROM " . $this->baseTable . $where . " ORDER BY id");            if (count($array) <=0 ){                return $zone;            }            $zone = $array[0]['id'];        } else {            return $zone;        }        $arrparentid .= ','. $zone;        if (isset($name[2]) && !empty($name[2])) {            $where = " WHERE name='{$name[2]}' and arrparentid='{$arrparentid}'";            $array = $this->db->select("SELECT * FROM " . $this->baseTable . $where . " ORDER BY id");            if (count($array) >0 ){                $zone = $array[0]['id'];            }        }        return $zone;    }}