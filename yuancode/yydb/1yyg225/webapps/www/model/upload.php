<?php/** * Class upload_model */class upload_model extends Lowxp_Model{    /**     * 对当前文件数据格式化。     * @param string $key 例如：<input name="upFile[]" />，$key为upFile     * @return array     */    function getFilesData($key){        if(!isset($_FILES[$key]))return array();        $files = array();        $F = $_FILES[$key];        if(isset($F['name']) && is_array($F['name'])){            foreach($F['name'] as $k=>$val){                $files[] = array(                    'name'=>$val,                    'type'=>$F['type'][$k],                    'tmp_name'=>$F['tmp_name'][$k],                    'error'=>$F['error'][$k],                    'size'=>$F['size'][$k]                );            }        }        return $files;    }    /**     * 上传图片     *     * @param int $id            关联图片ID     * @param string|array $key  $_FILES[key]*<input name="key" type="file" />*     * @param string $category   分类     * @param string $from     *     值为空:读取配置文件picture中的配置,     *     值为db:从数据表images_cate中读取配置     * 结合picture.php中的上传图片配置，进行上传     *     * 获取图片使用示例:     * $sizes = array('src','small');     * $this->getImgUrls($data, 'id', 'realty', $sizes);     * $data['id'] = '根据该ID从images中读取图片';     * $data['imgurl_small'] = $size中的small图片     * $data['imgurl_src'] = $size中的small图片     *     * @return bool|string     */    function image($id, $key, $category = 'product', $from=''){        if(is_array($key) && isset($key['name'])){            if(!isset($key['name']))return false;            $F = $key;        }else{            if(!isset($_FILES[$key]))return false;            $F = $_FILES[$key];        }        $filename = $F['name'];        $tmp_name = $F['tmp_name'];        if(!is_uploaded_file($tmp_name))return false;        $epos = strrpos($filename,'.');#点的位置        $name = substr($filename,0,$epos);#文件名称        $ext = strtolower(substr($filename,$epos));#扩展名        $allow_type = array('.jpg','.jpeg','.gif','.png');        if(!in_array($ext, $allow_type)){            return false;        }        //hex检测        if(!$this->checkHex($tmp_name)){            return false;        }        //删除旧文件        $old = $this->db->get("SELECT * FROM images WHERE data_id=".$id." AND cate='".$category."'");        $cateDir = $this->getCateDir($category);        if(isset($old['id']))$this->rmFile($cateDir.$old['imgurl']);//删除旧原图        //根据ID创建目录        $IdCat = $this->IdCat($id);        $FullDir = $this->getFullDir($IdCat, $category);        //原图保存路径        $savePath = $FullDir.$id.'_src'.$ext;        move_uploaded_file($tmp_name, $savePath);        //从数据库或从文件中读取配置.        $resize = $this->getPicConfig($category);        //生成图片缩略图        if(is_array($resize)){            static $loadedImage;            if(is_null($loadedImage)){                $this->load->library('image',array('ratio'=>true));                $loadedImage = true;            }            //载入图片.            $this->image->load_src($savePath);            foreach($resize as $size=>$val){                if(!isset($val['height'],$val['width']))continue;                //删除旧文件                if(isset($old['id'])){                    $oldsrc = $cateDir.str_replace('_src','_'.$size,$old['imgurl']);                    $this->rmFile($oldsrc);                }                $widht = $val['width'];                $height = $val['height'];                $path = $FullDir.$id.'_'.$size.$ext;                $this->image->resize($widht, $height, $path, true);                $this->yunsave(str_replace(RootDir.'web/upload/images','',$path));            }        }        //保存原图        $imgurl = $IdCat.$id.'_src'.$ext;        $image_size = getimagesize($savePath);        $input = array(            'data_id'=>$id,            'cate'=>$category,            'name'=>$name,            'imgspace'=>$F['size'],            'imgurl'=>$imgurl,            'size'=>$image_size[0].'x'.$image_size[1],            'c_time'=>time()        );        if(!isset($old['data_id'])){            $this->db->insert('images',$input);        }else{            $this->db->update('images',$input,array('id'=>$old['id']));        }        $this->yunsave($category.'/'.$imgurl);        return $imgurl;    }    /**     * 云存储     */    function yunsave($imgurl,$dir='',$savedir="/upload/images/"){        $c = ($this->mod == 'manage') ? $this->common : $this->site_config;        if(isset($c['cloudsave']) && $c['cloudsave']){            require_once(AppDir.'library/upyun.class.php');            //需存储在img1空间上的字段            $upyun = new UpYun($c['cloudserver'],$c['cloudadmin'],$c['cloudpass']);            $fh = fopen($this->load->config('picture','image_dir').$imgurl, 'rb');            $rsp = $upyun->writeFile($savedir.$imgurl, $fh, True);   // 上传图片，自动创建目录            fclose($fh);        }    }    /**     * 图片上传(不保存在图库)     * @param string|array $key  $_FILES[key]*<input name="key" type="file" />*     * @param $dir目录     * @param $save_original 是否保留原图     * @param $thumb缩放尺寸array     */    function save_image($key, $dir = 'images', $thumb = array()){        if(is_array($key) && isset($key['name'])){            if(!isset($key['name']))return false;            $F = $key;        }else{            if(!isset($_FILES[$key]))return false;            $F = $_FILES[$key];        }        $filename = $F['name'];        $tmp_name = $F['tmp_name'];        if(!is_uploaded_file($tmp_name))return false;        //文件格式限制        $epos = strrpos($filename,'.');#点的位置        $name = substr($filename,0,$epos);#文件名称        $ext = strtolower(substr($filename,$epos));#扩展名        $allow_type = array('.jpg','.jpeg','.gif','.png');        if(!in_array($ext, $allow_type)){            return false;        }        //hex检测        if(!$this->checkHex($tmp_name)){            return false;        }        //创建目录        static $upDir;        if(is_null($upDir))$upDir = $this->load->config('picture','image_dir');#保存目录        $FullDir = $upDir.$dir.'/';        is_dir($FullDir)||mkdir($FullDir,0777,true);        //新文件名        $name = $this->random_filename();        //原图保存路径        $savePath = $FullDir.$name.'_src'.$ext;        move_uploaded_file($tmp_name, $savePath);        //从数据库或从文件中读取配置.        $resize = $thumb;        //生成图片缩略图        if(is_array($resize)){            static $loadedImage;            if(is_null($loadedImage)){                $this->load->library('image',array('ratio'=>true));                $loadedImage = true;            }            //载入图片.            $this->image->load_src($savePath);            foreach($resize as $size=>$val){                if(!isset($val['height'],$val['width']))continue;                $widht = $val['width'];                $height = $val['height'];                $path = $FullDir.$name.'_'.$size.$ext;                $this->image->resize($widht, $height, $path, true);                $img = str_replace(RootDir.'web/upload/images','',$path);                $this->yunsave($img,$dir);            }        }        if(!empty($thumb)){            $this->rmFile($savePath);        }else{            $img = str_replace(RootDir.'web/upload/images','',$savePath);            $this->yunsave($img,$dir);        }        //保存原图        $imgurl = empty($thumb) ? str_replace(RootDir.'web','',$savePath) : str_replace(RootDir.'web','',$path);        return $imgurl;    }    /**     * 生成随机的数字串     *     * @author: weber liu     * @return string     */    function random_filename()    {        $str = '';        for($i = 0; $i < 9; $i++)        {            $str .= mt_rand(0, 9);        }        return date('Ymdhis') . $str;    }    /** 生成缩略图 用于模板实时生成     * @param $src 原图路径     * @param array $options     */    function thumb($src,$options=array()){        $type = isset($options['type']) ? (int) $options['type'] : 2;        $width = isset($options['width']) ? (int) $options['width'] : 0;        $height = isset($options['height']) ? (int) $options['height'] : 0;		        if(empty($width) && empty($height)) return;        $source = $src;        $src = ltrim($src,'/');        if(!is_file(WebDir.$src)) return false;        $this->load->library('image',array('ratio'=>$type));        $this->image->load_src(WebDir.$src);        $pathinfo = pathinfo($src);        $dir = $pathinfo['dirname'].'/';        $ext = $pathinfo['extension'];        $epos = strpos($pathinfo['filename'],'_');#_第一次出现的位置        $filename = substr($pathinfo['filename'],0,$epos+1);#文件名称        $path = $dir.$filename.'temp-'.$width.'-'.$height.'-'.$type.'.'.$ext;		        if(!is_file(WebDir.$path)){            $this->image->resize($width, $height, $path, ($type==2)?true:false);            $this->yunsave(str_replace('upload/images','',$path),$options['dir']);        }        if(is_file(WebDir.$path)){            $c = ($this->mod == 'manage') ? $this->common : $this->site_config;            if(isset($c['cloudsave']) && $c['cloudsave']){                return '/'.$path;            }else{                return RootUrl.$path;            }        }else{            return false;        }    }    /**     * 获取某个某个id下的一个或多个尺寸图片地址     * @param $id     * @param string $category     * @param string $size 配置中定义缩略图的尺寸small,middle,big     * @return array|string     */    function getImageUrl($id, $category='realty', $size=''){        //默认获取所有尺寸,以数组形式返回.        if(empty($size)){            $conf = $this->getPicConfig($category);            $size = array_keys($conf);            $size[] = 'src';        }        $urls = $sizes = array();        $isSingle = 0;        if(is_string($size)){            $sizes = array($size);            $isSingle = 1;        }else{            $sizes = $size;        }        $image = $this->db->get("SELECT * FROM images WHERE data_id=".$id);        if(!isset($image['data_id']))return $isSingle?'':array();        static $upUrl;        if(is_null($upUrl))$upUrl = $this->load->config('picture','image_url');#保存目录        $imgurl = $image['imgurl'];        foreach($sizes as $type){            $urls['imgurl_'.$type] = $upUrl.$category.'/'.str_replace('_src','_'.$type, $imgurl);;        }        if($isSingle){            if(isset($urls['imgurl_'.$size])){                return $urls['imgurl_'.$size];            }        }        return $urls;    }    /**     * 根据数据ID获取图片完整url地址     * @param $data     * @param string $key     * @param string $category     * @param array $sizelist     * @return array     */    function getImgUrls($data, $key='id', $category='gallery', $sizelist = array()){        if(count($data)==0)return $data;        if(!isset($data[0][$key]) && !isset($data[$key])) return false;        $isBatch = isset($data[$key]) ? false : true;        if(!$isBatch)$data = array($data);        //默认获取所有缩略图尺寸.        if(empty($sizelist)){            $sizes = $this->getPicConfig($category);            $sizelist = $sizes ? array_keys($sizes) : array();            $sizelist[] = 'src';        }        $data_ids = array();        foreach($data as $v){            if(is_numeric($v[$key]))$data_ids[] = $v[$key];        }        static $upUrl;        if(is_null($upUrl))$upUrl = $this->load->config('picture','image_url');#保存目录        $urlPrefix = $upUrl.$category.'/';        if($GLOBALS['lowxp']->mod=='manage') $urlPrefix = picurl($urlPrefix);        $match = array();        if(count($data_ids)){            $rows = $this->db->select("SELECT * FROM images WHERE data_id IN(".implode(',',$data_ids).") AND cate='".$category."'");            foreach($rows as $v){                $match[$v['data_id']] = array('imgurl'=>$v['imgurl'],'name'=>$v['name'],'size'=>$v['size']);            }        }        foreach($data as $k => $v){            $data[$k]['img_name'] = isset($match[$v[$key]]['name']) ? $match[$v[$key]]['name'] : '';            $data[$k]['img_size'] = isset($match[$v[$key]]['size']) ? $match[$v[$key]]['size'] : '';            foreach($sizelist as $size){                if(isset($v['imgurl_'.$size]) && !empty($v['imgurl_'.$size])) continue;                $data[$k]['imgurl_'.$size] = isset($match[$v[$key]]['imgurl']) ?                    $urlPrefix.str_replace('_src','_'.$size,$match[$v[$key]]['imgurl'])                    : '';            }        }        return $isBatch ? $data : $data[0];    }    /**     * 获取新闻图片地址     * @param $data     * @param array $sizes     *  src 原图     *  small 小图     *  middle 中图     * @return array     */    function getNewsImgUrl($data, $sizes = array('src')){        return $this->getImgUrls($data, 'id', 'news', $sizes);    }    function getBizcateImgUrl($data, $sizes = array('src','thumb')){        return $this->getImgUrls($data, 'id', 'bizcate', $sizes);    }    /**     * 获取编辑器图片     */    function getGalleryImgUrls($data, $sizes = array('src','middle','small','big','thumb')){        if(count($data)==0)return $data;        return $this->getImgUrls($data, 'id', 'gallery', $sizes);    }    function getWechatImgUrls($data, $sizes = array('src','thumb')){        if(count($data)==0)return $data;        return $this->getImgUrls($data, 'id', 'wechat', $sizes);    }    /**     * 获取微信文章封面图     * @param $data     * @param array $sizes     * @return array     */    function getArticleImgUrls($data, $sizes = array('src','thumb')){        if(count($data)==0)return $data;        return $this->getImgUrls($data, 'cover_id', 'wechat', $sizes);    }    /**     * 获取轮播图     * @param $data     * @param array $sizes     * @return array     */    function getSliderImgUrls($data, $sizes = array('src','middle')){        if(count($data)==0)return $data;        return $this->getImgUrls($data, 'id', 'slider', $sizes);    }    /**     * 获取广告图     * @param $data     * @param array $sizes     * @return array     */    function getAdsIMgUrls($data, $sizes = array('src')){        if(count($data)==0)return $data;        return $this->getImgUrls($data, 'id', 'wxsite_ad', $sizes);    }    /**     * 删除图片     * @param $ids     * @param string $category     */    function delImages($ids, $category='realty'){        if(!is_array($ids))$ids = array($ids);        foreach($ids as $k=>$v){            if(!is_numeric($v))unset($ids[$k]);        }        $rows = $this->db->select("SELECT * FROM images WHERE data_id IN(".implode(',',$ids).") AND cate='".$category."'");        static $imgDir;        if(is_null($imgDir))$imgDir = $this->load->config('picture','image_dir');        $dirPrefix = $imgDir.$category.'/';        //获取缩略图类型        $resizes = $this->getPicConfig($category);        $sizes = is_array($resizes) ? array_keys($resizes) : array();        foreach($rows as $v){            $pathList = array($dirPrefix.$v['imgurl']);            foreach($sizes as $size){                $pathList[] = $dirPrefix.str_replace('_src','_'.$size,$v['imgurl']);            }            $this->unlinkFiles($pathList);        }        $this->db->delete('images',array(            'data_id'=>$ids,            'cate'=>$category        ));    }    /**     * 删除多文件     * @param $files     */    function unlinkFiles($files){        if(is_array($files)){            foreach($files as $file){                $this->rmFile($file);            }        }    }    /**     * 删除单个文件     * @param $file     */    function rmFile($file){        if(is_file($file)){            $x = unlink($file);            if(!$x){                $this->load->model('debug');                $this->debug->WriteLog('文件删除失败：'.$file,'rmfile_error.log');                #$debug->WriteLog('文件删除失败：'.$file,'rmfile_error.log');            }else{                #echo $file."<br />\n";            }        }    }    /**     * 获取完整上传目录     *     * @param $idDir     * @param $category     * @param string $dirname     * @return string     */    function getFullDir($idDir, $category, $dirname = 'image_dir'){        $cateDir = $this->getCateDir($category, $dirname);        $FullDir = $cateDir.$idDir;        is_dir($FullDir)||mkdir($FullDir,0777,true);        return $FullDir;    }    /**     * 获取分类目录     * @param $category     * @param string $dirname     * @return string     */    function getCateDir($category, $dirname = 'image_dir'){        static $upDir;        if(is_null($upDir))$upDir = $this->load->config('picture',$dirname);#保存目录        return $upDir.$category.'/';    }    /**     * 根据分类获取图片缩略的配置     * @param string $category     * @return mixed     */    function getPicConfig($category = ''){        static $rules = array();        if(!isset($rules[$category])){            if(is_numeric($category)){                $imgRule = $this->db->get("SELECT * FROM images_thumb WHERE id=".$category);            }else{                $imgRule = $this->db->get("SELECT * FROM images_thumb WHERE image_type='".$category."'");                #$resize = $this->load->config('picture',$category.'_resize');            }            isset($imgRule['id']) || die('upload config is not find!');            $rules[$category] = json_decode($imgRule['rule'],true);        }        return $rules[$category];    }    #根据ID分文件夹    function IdCat($id){        $p0 = $id % 1296;        $p1 = ceil($p0 / 36)-1;        $p2 = ($p0-1) % 36 ;        return $this->IdNum($p1).'/'.$this->IdNum($p2).'/';    }    function IdNum($i){        return $i<10?($i==-1?'z':$i):chr(87+$i);    }    /**     * 匹配相同文件前缀(ID_/ID.)的文件     * @param $dir     * @param $filePrefix     * @return array|bool     */    function matchFiles($dir,$filePrefix){        if(!is_dir($dir))return false;        //打开目录        $handle=opendir($dir);        $files = array();        //阅读目录        while(false!=($file=readdir($handle))){            if($file=='.'&&$file=='..')continue;            if(is_file("$dir/$file")){                if(strpos($file,$filePrefix)===0){                    $files[] = $file;                }            }        }        return $files;    }    //======上传文件=====    /**     * 上传文件     * @param $id     * @param $key     * @param string $category     * @return bool     */    function upfile($id, $key, $category = 'base'){        if(is_array($key) && isset($key['name'])){            if(!isset($key['name']))return false;            $F = $key;        }else{            if(!isset($_FILES[$key]))return false;            $F = $_FILES[$key];        }        $filename = $F['name'];        $tmp_name = $F['tmp_name'];        if(!is_uploaded_file($tmp_name))return false;        $epos = strrpos($filename,'.');#点的位置        $name = substr($filename,0,$epos);#文件名称        $ext = strtolower(substr($filename,$epos));#扩展名        //删除旧文件        $old = $this->db->get("SELECT * FROM files WHERE data_id=".$id." AND cate='".$category."'");        $cateDir = $this->getCateDir($category,'file_dir');        if(isset($old['id']))$this->rmFile($cateDir.$old['fileurl']);//删除旧原图        //根据ID创建目录        $IdCat = $this->IdCat($id);        $FullDir = $this->getFullDir($IdCat, $category, 'file_dir');        //原图保存路径        $savePath = $FullDir.$id.$ext;        move_uploaded_file($tmp_name, $savePath);        //保存原图        $fileurl = $IdCat.$id.$ext;        $input = array(            'data_id'=>$id,            'cate'=>$category,            'name'=>$name,            'size'=>filesize($savePath),            'fileurl'=>$fileurl,            'ext'=>substr($ext,1),            'c_time'=>time()        );        if(!isset($old['data_id'])){            $this->db->insert('files',$input);        }else{            $this->db->update('files',$input,array('id'=>$old['id']));        }        return true;    }    /**     * 获取文件路径.     * @param $data     * @param string $key     * @param string $category     * @return mixed     */    function getFileUrls($data, $key='id', $category='base'){        if(count($data)==0)return $data;        if(!isset($data[0][$key]) && !isset($data[$key]))exit('key is not exists!');        $isBatch = isset($data[$key]) ? false : true;        $data_ids = array();        foreach($data as $v){            if(is_numeric($v[$key]))$data_ids[] = $v[$key];        }        static $upUrl;        if(is_null($upUrl))$upUrl = $this->load->config('picture','file_url');#保存目录        $urlPrefix = $upUrl.$category.'/';        $match = array();        if(count($data_ids)){            $rows = $this->db->select("SELECT data_id,name,fileurl,ext,size,c_time FROM files WHERE data_id IN(".implode(',',$data_ids).") AND cate='".$category."'");            foreach($rows as $v){                $match[$v['data_id']] = $v;            }        }        foreach($data as $k => $v){            $data[$k]['file_name'] = isset($match[$v[$key]]['name']) ? $match[$v[$key]]['name'] : '';            $data[$k]['file_ext'] = isset($match[$v[$key]]['ext']) ? $match[$v[$key]]['ext'] : '';            $data[$k]['file_url'] = isset($match[$v[$key]]['fileurl'])                ? $urlPrefix.$match[$v[$key]]['fileurl']                : '';            $data[$k]['file_path'] = str_replace(RootUrl,'/',$data[$k]['file_url']);        }        return $isBatch ? $data : $data[0];    }    //图片hex检测    function checkHex($source) {        $source = file_get_contents($source);        switch(bin2hex(substr($source,0,2))){            case 'ffd8' : return 'ffd9' === bin2hex(substr($source,-2)); #jpg#jpeg            case '8950' : return '6082' === bin2hex(substr($source,-2)); #png            case '4749' : return '003b' === bin2hex(substr($source,-2)); #gif            default : return false;        }    }}