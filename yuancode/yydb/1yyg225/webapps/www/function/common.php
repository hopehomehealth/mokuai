<?php #全局公用函数库/**获取IP地址 * @param int $type =1只获取本机IP * @return mixed */function getIP($type=1){    if(isset($_SERVER["HTTP_X_FORWARDED_FOR"])){        $ip = $_SERVER["HTTP_X_FORWARDED_FOR"];    }elseif(isset($_SERVER["HTTP_CLIENT_IP"])){        $ip = $_SERVER["HTTP_CLIENT_IP"];    }elseif(isset($_SERVER["REMOTE_ADDR"])){        $ip = $_SERVER["REMOTE_ADDR"];    }else{        $ip = "Unknown";    }    return pathIp($ip,$type);}/** 重新解析IP * @param $ip * @param int $type * @return string */function pathIp($ip,$type=1){    if(strpos($ip,',')!==false){        $ips = explode(',',$ip);        #type=1里去除代理IP        if($type==1){ return trim($ips[0]); }        #去除代理阿里云的IP        if(strpos(trim($ips[1]),'42.121.')!==false && strpos(trim($ips[1]),'42,121.')==0){            $ip = trim($ips[0]);        }    }    $ip = array('ip'=>$ip);    SafeFilter($ip);    return $ip['ip'];}/** * 获取当前网址 * @params $type string url全网址 www二级前缀 * @params $http string http or https or '' * @params $www string 设置前缀 */function getUrl($type = 'url', $http = '', $www = ''){    $http = $http ? $http : (($_SERVER['HTTPS']=='on')?'https':'http');    $host = $_SERVER['HTTP_HOST'];    $url = '';    if($type == 'www'){ #返回www前缀        $url = substr($host,0,strpos($host, '.'));        if($url!='m') $url = 'www';    }elseif($type == 'referer'){ #返回referer        $url = isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '';    }elseif($type == 'http'){        $url = $http;    }else{        $uri = $_SERVER['HTTP_X_REWRITE_URL'] ? $_SERVER['HTTP_X_REWRITE_URL'] : $_SERVER['REQUEST_URI'];        if($www){ #返回设置了前缀的网址            $url = $http . '://' . $www . '.' . Domain . $uri;        }else{ #返回原始网址            $url = $http . '://' . $host . $uri;        }    }    return $url;}/* 获取当前时间戳，精确到毫秒 */function microtime_float(){    list($usec, $sec) = explode(" ", microtime());    return str_replace(',','',number_format($usec+(float)$sec,3));}/** 格式化时间戳，精确到毫秒，x代表毫秒 * 1. 获取当前时间戳(精确到毫秒)：microtime_float() * 2. 时间戳转换时间：microtime_format(1270626578.000,'Y年m月d日 H时i分s秒 x毫秒') */function microtime_format($time, $tag='Y-m-d H:i:s x', $space=' '){    if(empty($time)) return false;    list($usec, $sec) = explode(".", $time);    $sec = !empty($sec) ? $sec : '000';    $date = date($tag,$usec);    $date = str_replace('x', $sec, $date);    if(trim($space)){ $date = str_replace(' ', $space, $date); }    return $date;}/** * 格式化价格 * @param   float   $price  商品价格 * @param   $type 格式化类型 * @return  string */function price_format($price, $type = 0, $sign = true){    if($price===''){ $price=0; }    $segments = Lowxp_Router::getInstance()->segments;    if ($segments[0] != 'manage')    {        switch ($type)        {            case 0:                $price = number_format($price, 2, '.', '');                break;            case 1:                $price = number_format($price, 0, '.', '');                break;            case 2:                $price = number_format($price, 2, '.', ',');                break;            case 3:                if($price>10000){                    $price = round($price/10000,1);                    $price .= ' 万';                }else{                    $price = number_format($price, 0, '.', '');                }                return $price;                break;            case 4:                $price = number_format($price, 0, '.', ',');                break;        }    }    else{ $price = number_format($price, 2, '.', ''); }    return $sign ? sprintf('￥%s', $price) : $price;}/** 记录后台操作日志 * @param $content */function admin_log($content){    global $lowxp;    $segments = Lowxp_Router::getInstance()->segments;    $mod = $segments[0];    if($mod != 'manage') return;    if(!empty($content) && GID>0){        $data = array(            'log_time'   => RUN_TIME,            'user_id'    => defined('UID')?UID:0,            'ip_address' => getIp(),            'log_info'   => $content        );        $lowxp->db->save('###_m_user_log',$data);    }}/** 更换模板smarty类配置 * @return mixed */function smartyTpl($tpl='tpl'){    global $lowxp;    $smarty = $lowxp->load->smarty(array(        'tplDir' => AppDir.'views/'.$tpl.'/',        'compileDir' => AppDir.'views_c/'.$tpl.'/',        'cacheDir' => AppDir.'cache/'.$tpl.'/',    ),true);    return $smarty;}/** 获取模板状态 * @param $template_code * @return bool */function statusTpl($template_code){    global $lowxp;    $sql = "SELECT status FROM ###_templates ".        "WHERE template_code = '$template_code'";    if($lowxp->db->getstr($sql) == 1){        return true;    }    return false;}/** * 设置缓存 */function zzcookie($name,$value='',$time=null){    return setcookie($name,$value,$time,'/',Domain);}/** * 读取缓存 */function cookie($name){    return isset($_COOKIE[$name]) ? $_COOKIE[$name] : '';}/** * 处理序列化的支付、配送的配置参数 * 返回一个以name为索引的数组 * @access  publi * @param   string       $cfg * @return  void */function unserialize_config($cfg){    if (is_string($cfg) && ($arr = unserialize($cfg)) !== false)    {        $config = array();        foreach ($arr AS $key => $val)        {            $config[$val['name']] = $val['value'];        }        return $config;    }    else    {        return false;    }}/** 发起HTTP请求 * @param $url * @param string $method * @param array $params * @param int $error * @param string $HttpHeader * @return mixed */function http($url, $method = 'get', $params = array(), $error=0, $HttpHeader=''){    $ch = curl_init();    curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);    curl_setopt($ch, CURLOPT_HEADER, 0); #返回头部信息    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);    curl_setopt($ch, CURLOPT_TIMEOUT, 30);    //取消SSL验证    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER,false);    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST,false);    if (strtolower($method) == 'post'){        if(is_array($params)){            $fields = http_build_query($params);        }else{            //咱用于微信发送无参数的纯文本数据            $HttpHeader[] = 'Content-Type: text/xml';            $fields = $params;        }        curl_setopt($ch, CURLOPT_POST, 1);        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields);    }else{        //Get请求,处理地址中包含的参数.        $segments = parse_url($url);        if(isset($segments['query']) && $segments['query']!=''){            parse_str($segments['query'],$params2);            $params = array_merge($params, $params2);        }        $fields = http_build_query($params);        $url = $segments['scheme'].'://'.$segments['host'].$segments['path'];        if($fields!='')$url = $url.'?'.$fields;        curl_setopt($ch, CURLOPT_HTTPGET, 1);    }    curl_setopt($ch, CURLOPT_URL, $url);    if($HttpHeader)curl_setopt($ch, CURLOPT_HTTPHEADER, $HttpHeader);    $ret = curl_exec($ch);    if ($error){        print curl_error($ch);    }    curl_close($ch);    return $ret;}/** * 删除匹配前缀的图片 * 图片带路径如：/upload/images/aaa.jpg */function delImage($filename){    global $lowxp;    $lowxp->load->model('upload');    if(is_file(RootDir.'web'.$filename)){        $basename = basename(RootDir.'web'.$filename);        $ext = '.'.end(explode('.', $basename));        $filestr = str_replace($ext,'',$basename);        $filestr = str_replace('_thumb','',$filestr);        $filedir = str_replace($basename,'',$filename);    }else{        return false;    }    $FullDir = RootDir.'web'.$filedir;    $files = $lowxp->upload->matchFiles($FullDir,$filestr);    foreach($files as $fileName){        $filePath = $FullDir.'/'.$fileName;        if(is_file($filePath)){            unlink($filePath);        }    }    return true;}/** 动态IP库获取城市字符串 * @param string $ip * @param string $item * @return mixed */function cityIp($ip='', $item='country'){    global $lowxp;    $lowxp->load->library('ip');    $addr = $lowxp->ip->ip2addr($ip?pathIp($ip,1):getIP(1));    return $addr[$item];}/** 验证邮件地址 */function is_email($email){    $chars = "/^([a-z0-9+_]|\\-|\\.)+@(([a-z0-9_]|\\-)+\\.)+[a-z]{2,6}\$/i";    if (strpos($email, '@') !== false && strpos($email, '.') !== false)    {        if (preg_match($chars, $email)){ return true; }        else{ return false; }    }    else{ return false; }}/** 验证手机号 */function is_mobile($mobile){    return (strlen($mobile) == 11 || strlen($mobile) == 12) && preg_match("/^1\d{10}$/", $mobile) || preg_match("/^0\d{11}$/", $mobile);}/** * 传入日期格式或时间戳格式时间，返回与当前时间的差距，如1分钟前，2小时前，5月前，3年前等 * @param string or int $date 分两种日期格式"2013-12-11 14:16:12"或时间戳格式"1386743303" * @param int $type * @return string */function formatTime($date = 0, $type = 1) { //$type = 1为时间戳格式，$type = 2为date时间格式    //date_default_timezone_set('PRC'); //设置成中国的时区    switch ($type) {        case 1:            //$date时间戳格式            $second = time() - $date;            $minute = floor($second / 60) ? floor($second / 60) : 1; //得到分钟数            if ($minute >= 60 && $minute < (60 * 24)) { //分钟大于等于60分钟且小于一天的分钟数，即按小时显示                $hour = floor($minute / 60); //得到小时数            } elseif ($minute >= (60 * 24) && $minute < (60 * 24 * 30)) { //如果分钟数大于等于一天的分钟数，且小于一月的分钟数，则按天显示                $day = floor($minute / ( 60 * 24)); //得到天数            } elseif ($minute >= (60 * 24 * 30) && $minute < (60 * 24 * 365)) { //如果分钟数大于等于一月且小于一年的分钟数，则按月显示                $month = floor($minute / (60 * 24 * 30)); //得到月数            } elseif ($minute >= (60 * 24 * 365)) { //如果分钟数大于等于一年的分钟数，则按年显示                $year = floor($minute / (60 * 24 * 365)); //得到年数            }            break;        case 2:            //$date为字符串格式 2013-06-06 19:16:12            $date = strtotime($date);            $second = time() - $date;            $minute = floor($second / 60) ? floor($second / 60) : 1; //得到分钟数            if ($minute >= 60 && $minute < (60 * 24)) { //分钟大于等于60分钟且小于一天的分钟数，即按小时显示                $hour = floor($minute / 60); //得到小时数            } elseif ($minute >= (60 * 24) && $minute < (60 * 24 * 30)) { //如果分钟数大于等于一天的分钟数，且小于一月的分钟数，则按天显示                $day = floor($minute / ( 60 * 24)); //得到天数            } elseif ($minute >= (60 * 24 * 30) && $minute < (60 * 24 * 365)) { //如果分钟数大于等于一月且小于一年的分钟数，则按月显示                $month = floor($minute / (60 * 24 * 30)); //得到月数            } elseif ($minute >= (60 * 24 * 365)) { //如果分钟数大于等于一年的分钟数，则按年显示                $year = floor($minute / (60 * 24 * 365)); //得到年数            }            break;        default:            break;    }    if (isset($year)) {        return (int) $year . '年前';    } elseif (isset($month)) {        return (int) $month . '月前';    } elseif (isset($day)) {        return (int) $day . '天前';    } elseif (isset($hour)) {        return (int) $hour . '小时前';    } elseif (isset($minute)) {        return (($minute > 0) ? $minute : '1') . '分钟前';    }}/** * 替换本地图片成图库图片 */function picurl($content="",$url=0){    global $lowxp;    $setting = ($lowxp->mod=='manage') ? $lowxp->common : $lowxp->site_config;    $cloudurl = ($url==1) ? $setting['cloudurl'] : $setting['cloudurl'];    if($url==1){        return $cloudurl . $content;    }    return str_replace(RootUrl.'upload',$cloudurl.'/upload',$content);}/** 禁用关键词 * @param $content */function badWord($content){    $badwords = array();    include AppDir.'data/badwords.php';    $badwords = array_combine($badwords,array_fill(0,count($badwords),'**'));    return strtr($content, $badwords);}//判断是否为ajax请求function isAjax(){    if(isset($_SERVER["HTTP_X_REQUESTED_WITH"]) && strtolower($_SERVER["HTTP_X_REQUESTED_WITH"])=="xmlhttprequest"){ return true; }    else return false;}/** * 生成二维码 */function creat_code($value,$filename='qrcode.png'){    global $lowxp;    $dir = RootDir.'web/upload/images/qrcode/';    #二维码图片不存在    if(!is_file($dir.$filename)){        include AppDir.'library/phpqrcode/phpqrcode.php';        $errorCorrectionLevel = 'L';//容错级别        $matrixPointSize = 5;//生成图片大小        $file = $dir.str_replace(".","a.",$filename);        //生成二维码图片        QRcode::png($value, $file , $errorCorrectionLevel, $matrixPointSize, 1);        $logo = RootDir.'web/upload/w_logo.png';//准备好的logo图片        $QR = $file;//已经生成的原始二维码图        if (file_exists($logo)) {            $QR = imagecreatefromstring(file_get_contents($QR));            $logo = imagecreatefromstring(file_get_contents($logo));            $QR_width = imagesx($QR);//二维码图片宽度            $QR_height = imagesy($QR);//二维码图片高度            $logo_width = imagesx($logo);//logo图片宽度            $logo_height = imagesy($logo);//logo图片高度            //$logo_qr_width = $QR_width/4;            $logo_qr_width = 16;            $scale = $logo_width/$logo_qr_width;            $logo_qr_height = $logo_height/$scale;            $from_width = ($QR_width - $logo_qr_width) / 2;            $from_height = ($QR_width - $logo_qr_height) / 2;            //重新组合图片并调整大小            imagecopyresampled($QR, $logo, $from_width, $from_height, 0, 0, $logo_qr_width,$logo_qr_height, $logo_width, $logo_height);        }        //输出图片        imagepng($QR, $dir.$filename);        imagedestroy($QR);        unlink($file);        $lowxp->load->model('upload');        $lowxp->upload->yunsave('qrcode/'.$filename);    }    return '/upload/images/qrcode/'.$filename;}//验证身份证function isIdCard($idcard){    $City = array(11=>"北京",12=>"天津",13=>"河北",14=>"山西",15=>"内蒙古",21=>"辽 宁",22=>"吉林",23=>"黑龙江",31=>"上海",32=>"江苏",33=>"浙江",34=>" 安徽",35=>"福建",36=>"江西",37=>"山东",41=>"河南",42=>"湖北",43=>" 湖南",44=>"广东",45=>"广西",46=>"海南",50=>"重庆",51=>"四川",52=>" 贵州",53=>"云南",54=>"西藏",61=>"陕西",62=>"甘肃",63=>"青海",64=>" 宁夏",65=>"新疆",71=>"台湾",81=>"香港",82=>"澳门",91=>"国外");    $iSum = 0;    $idCardLength = strlen($idcard);     //长度验证    if(!preg_match('/^\d{17}(\d|x)$/i',$idcard) and!preg_match('/^\d{15}$/i',$idcard))    {        return false;    }//地区验证    if(!array_key_exists(intval(substr($idcard,0,2)),$City))    {        return false;    }// 15位身份证验证生日，转换为18位    if ($idCardLength == 15)    {        $sBirthday = '19'.substr($idcard,6,2).'-'.substr($idcard,8,2).'-'.substr($idcard,10,2);        if(substr($idcard,8,2)>12) return false;        if(substr($idcard,10,2)>31) return false;        $d = new DateTime($sBirthday);        $dd = $d->format('Y-m-d');        if($sBirthday != $dd)        {            return false;        }        $idcard = substr($idcard,0,6)."19".substr($idcard,6,9);//15to18        $Bit18 = getVerifyBit($idcard);//算出第18位校验码        $idcard = $idcard.$Bit18;    }// 判断是否大于2078年，小于1900年    $year = substr($idcard,6,4);    if ($year<1900 || $year>2078 )    {        return false;    }//18位身份证处理    $sBirthday = substr($idcard,6,4).'-'.substr($idcard,10,2).'-'.substr($idcard,12,2);    if(substr($idcard,10,2)>13) return false;    if(substr($idcard,12,2)>31) return false;    $d = new DateTime($sBirthday);    $dd = $d->format('Y-m-d');    if($sBirthday != $dd)    {        return false;    }//身份证编码规范验证    $idcard_base = substr($idcard,0,17);    if(strtoupper(substr($idcard,17,1)) != getVerifyBit($idcard_base))    {        return false;    }    return true;}// 计算身份证校验码，根据国家标准GB 11643-1999function getVerifyBit($idcard_base){    if(strlen($idcard_base) != 17)    {        return false;    }    //加权因子    $factor = array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);    //校验码对应值    $verify_number_list = array('1', '0', 'X', '9', '8', '7', '6', '5', '4','3', '2');    $checksum = 0;    for ($i = 0; $i < strlen($idcard_base); $i++)    {        $checksum += substr($idcard_base, $i, 1) * $factor[$i];    }    $mod = $checksum % 11;    $verify_number = $verify_number_list[$mod];    return $verify_number;}/** * 语音验证码 */function voiceVerify($mobile=''){    global $lowxp;    if(empty($mobile)) return false;    if($_SESSION['voiceVerify']) unset($_SESSION['voiceVerify']);    //获取验证码    $lowxp->load->library('sms');    $verifyCode = $lowxp->sms->getVerifyCode();    include_once(AppDir.'library/CCPRestSDK.php');    // 初始化REST SDK    //$serverIP = 'sandboxapp.cloopen.com';    $serverIP = 'app.cloopen.com';    $serverPort = '8883';    $softVersion = '2013-12-26';    //语音接口配置帐号    $accountSid = $lowxp->site_config['voice_sid'];    $accountToken = $lowxp->site_config['voice_token'];    $appId = $lowxp->site_config['voice_appid'];    $playTimes = '2';    $rest = new REST($serverIP,$serverPort,$softVersion);    $rest->setAccount($accountSid,$accountToken);    $rest->setAppId($appId);    $result = $rest->voiceVerify($verifyCode,$playTimes,$mobile,"4000901225",$respUrl='');    if($result == NULL ) {        //echo "result error!";        return false;    }    if($result->statusCode!=0) {        //echo "error code :" . $result->statusCode . "<br>";        //echo "error msg :" . $result->statusMsg . "<br>";        return false;        //TODO 添加错误处理逻辑    } else{        $voiceVerify = $result->VoiceVerify;        //echo "callSid:".$voiceVerify->callSid."<br/>";        //echo "dateCreated:".$voiceVerify->dateCreated."<br/>";        //TODO 添加成功处理逻辑        $_SESSION['voiceVerify']['mobile'] = $mobile;        $_SESSION['voiceVerify']['code'] = $verifyCode;        return $verifyCode;    }}/** php防注入和XSS攻击通用过滤. * @param $arr * @param int $type * @param int $app * @return bool */function SafeFilter (&$arr, $type=0,$app=0){    if($type == 1){        if (is_array($arr)){            foreach ($arr as $key => $value){                if (!is_array($value)){                    if (!get_magic_quotes_gpc()){                        $value = stripslashes($value);                    }                    //$arr[$key] = $value;                    $arr[$key] = htmlspecialchars_decode($value,ENT_QUOTES);                }                else{                    SafeFilter($arr[$key], $type);                }            }        }        return false;    }    if (is_array($arr)){        foreach ($arr as $key => $value){            if (!is_array($value)){                if (!get_magic_quotes_gpc()){                    $value = $app ? $value : addslashes($value);                }                //屏蔽可注入关键词                $word_data = array(                		"execute","update","master","truncate","declare","select",                		"create","delete","insert","use","load_file","outfile","extract",                		"eval","group_concat"                		);                $error_data = array("%"," ","/**/");                foreach($word_data as $v){                	foreach($error_data as $e){                		$find[] = $v.$e;                	}                }                //$find = array(               //     "execute%","execute ","update%","update ","master%","master ",               //     "truncate%","truncate ","declare%","declare ","select%","select ",                //    "create%","create ","delete%","delete ","insert%","insert ",               //     "use%","use ","load_file%","load_file ","outfile%","outfile ",                //    "extract%","extract ","eval%","eval ","group_concat%","group_concat ","/**/");                $value = str_ireplace($find,"",$value);                $arr[$key] = $app ? $value : htmlspecialchars($value,ENT_QUOTES);            }            else{                SafeFilter($arr[$key]);            }        }    }}/** token令牌 * @return mixed */function createToken(){    $token = md5(md5(RUN_TIME.'13KS1F95WO33Q110'));    $_SESSION['token'] = $token;    return $token;}function checkToken(){    $return = $_REQUEST['token'] === $_SESSION['token'] ? true : false;    createToken();    return $return;}//字符串清理function DeleteHtml($str){    $str = trim($str); //清除字符串两边的空格    $str = preg_replace("/\t/","",$str); //使用正则表达式替换内容，如：空格，换行，并将替换为空。    $str = preg_replace("/\r\n/","",$str);    $str = preg_replace("/\r/","",$str);    $str = preg_replace("/\n/","",$str);    $str = preg_replace("/ /","",$str);    $str = preg_replace("/  /","",$str);  //匹配html中的空格    return trim($str); //返回字符串}/** 默认图片处理 * @param $pic * @param string $type * @return string */function default_pic($pic, $type='store'){    if(is_file(WebDir.substr($pic,1))) return $pic;    $pic = '';    switch($type){        case 'ad':            $pic = "/style/images/default/ad.jpg";            break;        default:            $pic = "/style/images/default/store.png";            break;    }    return $pic;}/** * 中文字符长度 * @param $str * @return int */function abslength($str){    if(empty($str)){        return 0;    }    if(function_exists('mb_strlen')){        return mb_strlen($str,'utf-8');    }    else {        preg_match_all("/./u", $str, $ar);        return count($ar[0]);    }}function pathExtType($src){    $ext = pathinfo($src, PATHINFO_EXTENSION);    if(in_array(strtolower($ext), array('mp4','flv'))){        return 'video';    }    return 'image';}