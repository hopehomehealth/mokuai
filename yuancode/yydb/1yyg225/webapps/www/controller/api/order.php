<?php/** * 下单流程 */class order extends Lowxp{    function __construct(){        parent::__construct();        $isLogin = isset($_SESSION['mid'])&&$_SESSION['mid'];        if($isLogin){            $this->load->model('cart');            $this->load->model('member');            $this->memberinfo = $this->member->member_info($_SESSION['mid']);            $this->smarty->assign('member',$this->memberinfo);            define('MID',$_SESSION['mid']);            define('USER',$this->memberinfo['username']);        }else{            $this->exeJs('location.href="'.url().'member/login"');die;        }        $this->display_before(array('title'=>'订单中心'));        $this->ur_here('订单中心');    }    /** 竞拍成功或中奖者下单     * @param int $type 购物车类型     * @param int $id   扩展id     */    function buy(){        $seo_title = "";        $seo_url = "";        #订单类型        $type = isset($_POST['type']) ? intval($_POST['type']) : CART_WIN;        $id = isset($_POST['id']) ? intval($_POST['id']) : 0;        $act = isset($_POST['act']) ? trim($_POST['act']) : '';        $dataCart = array(); #保存购物车信息        $data = array();        #扩展ID        if ($id <= 0){ $this->msg();die; }        $this->smarty->assign('id', $id);        #先要通过语音认证和实名认证//        if(!$this->memberinfo['realname'] && $this->site_config['need_idcard']){//            $this->msg(//                '请先认证身份证！',//                array(//                    'url'=>'/member/verifyidcard',//                    'iniframe'=>false//                )//            );//            die;//        }        #中奖下单        if($type == CART_WIN){            #出价详情            $sql = "SELECT * FROM ###_auction_log WHERE log_id='$id' AND bid_user='".MID."'";            $log = $this->db->get($sql);            if(empty($log)){ $this->msg();die; }            #判断领奖状态            $this->load->model('auction');            if($log['status'] != 1 || ($log['cod_time'] < strtotime('-'.$this->auction->disDays.' days') && $log['fdis']==0)){                $this->msg();die;            }            #竞拍信息            $auction = $this->auction->get($log['act_id']);            if(empty($auction)){ $this->msg();die; }            $dataCart = array(                'goods_price' => $log['bid_price'],                'goods_id'       => $auction['goods_id'],                'goods_name'     => $auction['title'],                'market_price'   => $auction['old_price'],            );            $seo_title = $this->L['unit_pay']."中奖";            $seo_url = "member/cod";        }        #竞拍下单        elseif($type == CART_AUC){            #竞拍信息            $this->load->model('auction');            $auction = $this->auction->get($id);            if(empty($auction)){ $this->msg();die; }            #条件判断：竞拍模式            if($auction['type'] != 1){                $this->msg("非".$this->L['unit_pay']."模式商品，不能购买！",array('url'=>'/','iniframe'=>false));die;            }            #条件判断：已结束，未处理            if($auction['status'] != FINISHED){                $this->msg("该".$this->L['unit_pay']."活动不是已结束未处理状态，不能购买！",array('url'=>'/','iniframe'=>false));die;            }            #条件判断：是否有人出价            if($auction['bid_user_count'] <= 0){                $this->msg("该".$this->L['unit_pay']."活动没有人出价，不能购买！",array('url'=>'/','iniframe'=>false));die;            }            #条件判断：是否已经下单            if($this->db->getstr("SELECT COUNT(*) FROM ###_goods_order WHERE mid='".MID."' AND extension_code='$type' AND extension_id='$id' AND status!=5") > 0){                $this->msg('您已经下过订单了，如果您想重新购买，请先取消原来的订单！',array('url'=>'/','iniframe'=>false));die;            }            #条件判断：是最高出价者            if($auction['last_bid']['bid_user'] != MID){                $this->msg('您不是最高出价者，不能购买！',array('url'=>'/','iniframe'=>false));die;            }            $dataCart = array(                'goods_price'    => $auction['current_price'],                'goods_id'       => $auction['goods_id'],                'goods_name'     => $auction['title'],                'market_price'   => $auction['old_price'],            );            $seo_title = $this->L['unit_pay']."获得";            $seo_url = "";        }        elseif($type == CART_DB){            $this->load->model('yunbuy');            $db_info = $this->yunbuy->dbInfo(''," mid = '".MID."' AND id = '$id'");            if(empty($db_info['luck_code']) || $db_info['is_award']==1){                $this->api_result(array('msg'=>"该".$this->L['unit_yun']."已领取过".$this->L['jiangli'],'code'=>1));            }            $yuninfo = $this->yunbuy->yuninfo($db_info['buy_id']);            //免费云购,中奖超过7天无法领奖            if($db_info['fdis']!=1 && $yuninfo['type']==2 && RUN_TIME>$yuninfo['end_time']+7*3600*24) $this->api_result(array('msg'=>'中奖7天内才可'.$this->L['unit_lingjiang'].',您已超过'.$this->L['unit_lingjiang'].'期限','code'=>1));            //折现            if($act=='money'){                $tx = isset($_POST['tx']) ? intval($_POST['tx']) : 0;                $result = array('error'=>1,'msg'=>'');                //获取商品原价                $goods = $this->db->get('SELECT real_price FROM ###_goods WHERE id='.$yuninfo['goods_id']);                $price = $goods['real_price'];                if($price<=0){                    $result['msg'] = '该商品不可折现';                    exit(json_encode($result));                }                //判断是否可以提现                if($tx==1){                    $bankcard = $this->member->bankcard(MID);                    if(empty($bankcard)){                        $result['msg'] = '请先绑定您要提现的银行卡';                        $result['url'] = '/member/bankcard';                        exit(json_encode($result));                    }                }                $this->member->accountlog(ACT_ORDER,array(                    'user_money' => $price,                    'mid'        => MID,                    'desc'       => sprintf('云购中奖折现：%s',$db_info['goods_name']),                ));                //更新云购状态                $this->db->update('yundb',array('is_award'=>1),array('id'=>$id));                //生成提现记录                if($tx==1){                    $bankcard = $this->db->get("SELECT * FROM ###_member_bankcard WHERE mid = '".MID."' ORDER BY is_default DESC");                    $input = array();                    $input['mid'] = MID;                    $input['username'] = USER;                    $input['amount'] = $price;                    $input['pay_id'] = $bankcard['id'];                    $input['pay_name'] = $bankcard['bankname'];                    $input['type'] = 2;                    $input['fee'] = 0;                    $input['status'] = 1;                    $input['user_note'] = $bankcard['bankcard'];                    $state = $this->member->member_account_save($input);                    //冻结提现金额                    if($state['code']==0){                        $input = array();                        $input['mid'] = MID;                        $input['user_money'] = -$price;                        $input['frozen_money'] = $price;                        $input['desc'] = '折现提现,冻结'.$this->L['unit_baozheng'];                        $this->member->accountlog('withdraw',$input);                    }                    $result['error'] = 0;                    $result['msg'] = '已申请提现记录，等待管理员审核！';                    exit(json_encode($result));                }else{                    $result['error'] = 0;                    $result['msg'] = '已成功折现至您的帐户余额！';                    exit(json_encode($result));                }            }            $dataCart = array(                'goods_price'    => 0,                'goods_id'       => $yuninfo['goods_id'],                'goods_name'     => $yuninfo['title'],                'market_price' =>$yuninfo['goods_price']            );            $data['db_info'] = $db_info;        }        else{            $this->api_result(array('msg'=>'商品不存在','code'=>2));        }        $data['type'] = $type;        #订单留言提示        if(isset($dataCart['goods_id']) && !empty($dataCart['goods_id'])){            $goods = $this->db->get("SELECT tips,virtual FROM ###_goods WHERE id=".$dataCart['goods_id']);            $data['tips'] = $goods['tips'];        }        #加入购物车        $this->cart->add(array_merge(array(            'mid'            => MID,            'cart_type'      => $type,            'extension_id'   => $id,            'goods_number'   => 1,            'is_real'        => $goods['virtual'] ? 0 : 1,            'addtime'        => time(),        ), $dataCart));        $_SESSION['extension_id'] = $id;        $_SESSION['extension_code'] = $type;        #获取购物车内容        $data['cart'] = $this->cart->select(MID, $type);        $data = array_merge($data,$this->cart->cartTotal($data['cart']));        #收货地址        $data['addressList'] = $this->member->member_address(MID);        if(empty($data['addressList'])){            $this->api_result(array('msg'=>'请先添加收货地址','code'=>3));        }        #TODO:修改收货地址        /*$address_id = $_GET['address_id'] ? bcadd($_GET['address_id'],0) : 0;        if($address_id){            $address_ids = array();            foreach($data['addressList'] as $v){                $address_ids[] = $v['id'];            }            if(in_array($address_id,$address_ids)){                $_SESSION['order_address_id'] = $address_id;                $this->msg('',array('url'=>url('/order/buy/'.$type.'/'.$id)));            }        }*/        $data['order_address_id'] = $_SESSION['order_address_id'] = $data['addressList'][0]['id'];        #支付方式        $this->load->model('payment');        $data['paymentList'] = $this->payment->getPayment("enabled = '1' AND is_cod <> '1' AND pay_code <>'balance'");        #订单信息        $this->load->model('order');        $order = $this->order->flow_order_info();        $data['pay_id'] = $order['pay_id'];        #获取冻结款支付 竞拍中奖 竞拍最高价 保证金需要大于0并且购物车金额需要大于等于保证金的情况        if(($type == CART_AUC || $type == CART_WIN) && $auction['deposit'] > 0 && $dataCart['goods_price'] >= $auction['deposit']){            $order['deposit'] = $auction['deposit'];        }        #计算金额        $total = $this->order->order_fee($order, $data['cart']);        $data['total'] = $total;        #保存session        $_SESSION['flow_order'] = $order;        $this->api_result(array('data'=>$data));    }    /** 订单提交 */    function done(){        $type = isset($_SESSION['extension_code']) ? $_SESSION['extension_code'] : $_POST['extension_code'];        $id = isset($_SESSION['extension_id']) ? $_SESSION['extension_id'] :  $_POST['extension_id'];        if(!in_array($type, array(CART_WIN, CART_AUC, CART_DB))) $this->api_result(array('msg'=>'类型不存在'));        #扩展ID        if ($id <= 0) $this->api_result(array('msg'=>'错误数据'));        #检查购物车        $cart = $this->cart->select(MID, $type);        if(empty($cart)) $this->api_result(array('msg'=>'您的购物车没有商品','code'=>4));        $tips = $this->db->getstr("SELECT tips FROM ###_goods WHERE id=".$cart[0]['goods_id']);        $goods_info = htmlspecialchars($_POST['goods_info']);        if(!empty($tips) && $goods_info == $tips) { $this->api_result(array('msg'=>'此订单需要填写订单备注','code'=>5));}        $order = array(            'mid'            => MID,            'note'           => $goods_info,            'status'         => 1,            'c_time'         => time(),            'extension_code' => $type,            'extension_id'   => $id,            'pay_id'         => intval($_POST['payment']),        );        #检查收货地址        $addressList = $this->member->member_address(MID);        $address_id = $_POST['address_id'];        $address_ids = array();        foreach($addressList as $v){            $address_ids[] = $v['id'];        }        if($address_ids && in_array($address_id,$address_ids)){            $address = $this->db->get("SELECT * FROM member_address WHERE id = '$address_id'");            $order['deliver'] = $address['address'];            $order['area'] = $address['area'];            $order['mobile'] = $address['mobile'];            $order['name'] = $address['name'];        }else{            $this->api_result(array('msg'=>'请先添加收货地址','code'=>1));        }        #获取使用的拍币        $this->load->model('order');        $flow_order = $this->order->flow_order_info();        $total = $this->order->order_fee($flow_order, $cart);        $order['integral'] = $total['integral'];        $order['surplus'] = $total['surplus'];        $order['deposit'] = $total['deposit'];        $order['amount'] = $total['amount'];        $order['order_price'] = $total['goods_price'];        //如果订单金额为0（使用余额或积分或红包支付），修改订单状态为已确认、已付款        if($order['amount'] <= 0){            $order['status']   = 2;            $order['pay_time'] = time();            $order['amount'] = 0;        }else{            #第三方支付信息            if ($order['pay_id'] > 0){                $this->load->model('payment');                $payment = $this->payment->payment_info($order['pay_id']);                $order['pay_name'] = addslashes($payment['pay_name']);            }else{                $this->api_result(array('msg'=>'必须选择一个支付方式','code'=>2));            }        }        $order['order_amount'] = $order['amount'];        $order['pay_fee'] = $total['pay_fee'];        #插入订单表        $order['order_sn'] = $this->get_order_sn();        $order_id = $order['order_id'] = $this->db->save('goods_order',$order);        if (!$order_id)        {            $this->api_result(array('msg'=>'订单添加失败'));        }        #插入订单商品表        $this->load->model('virtual');        foreach($cart as $v){            $data = array(                'mid'        => $v['mid'],                'order_id'   => $order_id,                'good_id'    => $v['goods_id'],                'goods_name' => $v['goods_name'],                'buy_num'    => $v['goods_number'],                'sell_price' => $v['goods_price'],                'c_time'     => time(),                'goods_info' => $goods_info,                'virtual'    => $v['is_real'] ? 0 : 1,            );            $item_id = $this->db->save('goods_order_item', $data);            //虚拟商品发送卡密            if($order['amount'] <= 0){                $this->virtual->send($item_id, $data);                if($v['is_real'] == 0 && count($cart) == 1){                    $this->load->model('order');                    $this->order->chageOrderState($order_id,3,'虚拟商品自动发货');                }            }        }        #清空购物车        $this->cart->clear(MID,$type);        if($type == CART_WIN){            //更新出价状态为已领奖            $this->db->update('auction_log',array('status'=>2),array('log_id'=>$id));        }        elseif($type == CART_AUC){            //更新竞拍商品状态            $this->db->update('goods_activity',array('is_finished'=>2),array('act_id'=>$id));        }        elseif($type == CART_DB){            //更新云购状态            $this->db->update('yundb',array('is_award'=>1),array('id'=>$id));            //免费云购赠送抵用券            $row = $this->db->get("SELECT type FROM ###_yundb WHERE id=$id");            if($row['type']==2){                $this->load->model('bonus');                $bonus_id = $this->bonus->send(array(                    'mid'  => MID,                    'send_type' => 1,                    'desc' => "免费".$this->L['unit_yun']."中奖领取"                ));                if($bonus_id && !is_array($bonus_id)){                    $order['add_bonus_id'] = $bonus_id;                }            }        }        #处理余额、拍币        if($order['surplus'] > 0){            $this->member->accountlog(ACT_ORDER,array(                'user_money' => (-1)*$order['surplus'],                'mid'        => MID,                'desc'       => sprintf('支付订单 %s',$order['order_sn']),            ));        }        if($order['integral'] > 0){            $this->member->accountlog(ACT_ORDER,array(                'pay_points' => (-1)*$order['integral'],                'mid'        => MID,                'desc'       => sprintf('支付订单 %s',$order['order_sn']),            ));        }        if($order['amount'] <= 0){            $this->api_result(array('code'=>0));        }else{            //在线支付,插入支付日志跳转支付            $this->load->model('payment');            $order['log_id'] = $this->payment->pay_log_save(array('order_id'=>$order_id,'order_amount'=>$order['amount'],'order_type'=>PAY_ORDER,'is_paid'=>PS_UNPAYED));            $payment_info = $this->payment->payment_info($order['pay_id']);            $payment = unserialize_config($payment_info['pay_config']);            if($payment_info['is_cod'] != 0 && $payment_info['pay_code'] != 'balance'){                $this->msg('下单成功,我们将尽快发货！',array('url'=>'/member/order','iniframe'=>true));die;            }            if($payment_info['pay_code'] != 'balance'){                $this->msg('下单成功！',array('url'=>'/member/order','iniframe'=>true));die;            }            /* 调用相应的支付方式文件 */            include_once(AppDir . 'includes/modules/payment/' . $payment_info['pay_code'] . '.php');            /* 取得在线支付方式的支付按钮 */            $row['title'] = '在线支付';            $this->ur_here($row['title']);            $this->display_before($row);            $pay_obj = new $payment_info['pay_code'];            $payment_info['pay_button'] = $pay_obj->get_code($order, $payment);            $this->smarty->assign('payment',$payment_info);            $this->smarty->display('order/done.html');        }    }    /** ajax更新订单金额信息 */    function updateAmount(){        $type = isset($_SESSION['extension_code']) ? intval($_SESSION['extension_code']) : CART_WIN;        $integral = isset($_POST['integral']) ? intval($_POST['integral']) : 0;        $surplus = isset($_POST['surplus']) ? floatval($_POST['surplus']) : 0;        $pay_id = isset($_POST['pay_id']) ? intval($_POST['pay_id']) : 0;        #支付方式        $this->load->model('payment');        $data['paymentList'] = $this->payment->getPayment("enabled = '1' AND is_cod <> '1' AND pay_code <>'balance'");        #获取购物车内容        $data['cart'] = $this->cart->select(MID, $type);        $data = array_merge($data,$this->cart->cartTotal($data['cart']));        $this->load->model('order');        $order = $this->order->flow_order_info();        #使用拍币        if($integral){            $order['integral'] = $data['pay_points'];        }else if(isset($_POST['integral'])){            $order['integral'] = 0;        }        #使用余额        if($surplus){            $order['surplus'] = $this->memberinfo['user_money'];        }else if(isset($_POST['surplus'])){            $order['surplus'] = 0;        }        #更新支付方式        if($pay_id){            $order['pay_id'] = $pay_id;        }        $data['pay_id'] = $order['pay_id'];        /* 重新计算订单的费用 */        $total = $this->order->order_fee($order, $data['cart']);        $this->smarty->assign('total', $total);        $this->smarty->assign('data',$data);        $content = $this->smarty->fetch('order/total.html');        exit($content);    }    /** ajax修改收货地址 */    function updateAddress(){        $type = isset($_SESSION['extension_code']) ? intval($_SESSION['extension_code']) : CART_WIN;        $address_id = isset($_POST['address_id']) ? bcadd($_POST['address_id'],0) : 0;        #收货地址        $addressList = $this->member->member_address(MID);        #获取购物车内容        $data['cart'] = $this->cart->select(MID, $type);        $data = array_merge($data,$this->cart->cartTotal($data['cart']));        #修改收货地址        if($address_id){            $address_ids = array();            foreach($addressList as $v){                $address_ids[] = $v['id'];            }            if(in_array($address_id,$address_ids)){                $_SESSION['order_address_id'] = $address_id;            }        }        exit('1');    }    /** 得到新订单号     * @return  string     */    private function get_order_sn()    {        $order_sn = date('Ymd').substr( implode(NULL,array_map('ord',str_split(substr(uniqid(),7,13),1))) , -8 , 8);        return $order_sn;    }    /** 订单剩余支付     * @param string $id 订单id     */    function pay($id){        $order_info = $this->db->get("SELECT * FROM ###_goods_order WHERE id = '$id' AND status<3");        if(empty($order_info)) exit($this->msg('订单状态错误',array('iniframe'=>false)));        if($order_info['amount']<=0) exit($this->msg('订单已经支付完成',array('iniframe'=>false)));        $this->load->model('payment');        $payment_info = $this->payment->payment_info($order_info['pay_id']);        $order = array();        $order['order_sn'] = $order_info['order_sn'];        $order['surplus_amount'] = $order_info['amount'];        //计算支付手续费用        $payment_info['pay_fee'] = $this->payment->pay_fee($order_info['pay_id'], $order_info['amount']);        $order['order_amount'] = $order_info['amount'] + $payment_info['pay_fee'];        $pay_log =  $this->db->get("SELECT * FROM ###_pay_log WHERE order_id = '$id' AND order_type = '".PAY_ORDER."'");        $order['log_id'] = $pay_log['log_id'];        //取得支付信息，生成支付代码        $payment = unserialize_config($payment_info['pay_config']);        /* 调用相应的支付方式文件 */        include_once(AppDir . 'includes/modules/payment/' . $payment_info['pay_code'] . '.php');        /* 取得在线支付方式的支付按钮 */        $pay_obj = new $payment_info['pay_code'];        $payment_info['pay_button'] = $pay_obj->get_code($order, $payment);        if(STPL == 'mobile'){            $row['head'] = '订单支付';            $this->smarty->assign('row',$row);        }        $this->smarty->assign('order',$order);        $this->smarty->assign('payment_info',$payment_info);        $this->smarty->display('order/pay.html');    }}