<?phpclass Base_Library extends Lowxp_Model{    /**     * 转义字符串或数组     * @param $string 需要处理的字符串或数组     * @return mixed     */    function new_addslashes($string){        if(!get_magic_quotes_gpc()) {            if(!is_array($string)) return addslashes($string);            foreach($string as $key => $val) $string[$key] = $this->new_addslashes($val);        }        return $string;    }    /**     * 反转义字符串或数组     * @param $string 需要处理的字符串或数组     * @return mixed     */    function new_stripslashes($string) {        if(!is_array($string)) return stripslashes($string);        foreach($string as $key => $val) $string[$key] = $this->new_stripslashes($val);        return $string;    }    /**     * 安全过滤函数     * @param $string     * @return string     */    function safe_replace($string) {        $string = str_replace('%20','',$string);        $string = str_replace('%27','',$string);        $string = str_replace('%2527','',$string);        $string = str_replace('*','',$string);        $string = str_replace('"','&quot;',$string);        $string = str_replace("'",'',$string);        $string = str_replace('"','',$string);        $string = str_replace(';','',$string);        $string = str_replace('<','&lt;',$string);        $string = str_replace('>','&gt;',$string);        $string = str_replace("{",'',$string);        $string = str_replace('}','',$string);        $string = str_replace('\\','',$string);        return $string;    }    /** 将用符号分隔的字符串 解析成 数组     * @param $string     * @param array $char     * @return array     */    function explodeChar($string, $char=array("\n","|")){        $array = array();        $char01 = '';$char02 = '';        if(is_array($char)){ $char01 = $char[0]; $char02 = $char[1]; }        else{ $char01 = $char; }        $options = explode($char01,$string);        foreach($options as $v){            $v = trim($v);            if(empty($v)) continue;            if($char02){                $arr = explode($char[1],$v);                if(!empty($arr[0]) || !empty($arr[1])){                    $array[trim($arr[1])] = trim($arr[0]);                }            }else{                $array[] = $v;            }        }        return $array;    }    /** 正则验证     * @param $value     * @param $type     * @return bool     */    function validate($value='', $type=''){        $validator = array(            'email' =>       array('邮箱地址','/^[^0-9][a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)*[@][a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)*[.][a-zA-Z]{2,4}$/',),            'mobile' =>      array('手机号码','/^1[0-9]{10,11}$/',),            'tel' =>         array('电话号码','/^[+]{0,1}(\d){1,4}[ ]{0,1}([-]{0,1}((\d)|[ ]){1,12})+$/',),            'url' =>         array('网址','/^(http|https|ftp):\/\/([A-Z0-9][A-Z0-9_-]*(?:\.[A-Z0-9][A-Z0-9_-]*)+):?(\d+)?\/?/i'),            'date' =>        array('日期','/^[0-9]{4}(\-|\/)[0-9]{1,2}(\\1)[0-9]{1,2}(|\s+[0-9]{1,2}(|:[0-9]{1,2}(|:[0-9]{1,2})))$/'),            'number' =>      array('有效数值','/^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/'),            'digits' =>      array('数字','/^\d+$/'),            'creditcard' =>  array('信用卡号码','/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6011[0-9]{12}|3(?:0[0-5]|[68][0-9])[0-9]{11}|3[47][0-9]{13})$/'),            'ip4' =>         array('Ip地址','/^(([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/'),            'zipcode' =>     array('邮编','/^([0-9]{5})(-[0-9]{4})?$/i'),            'qq' =>          array('qq号','/^\d{5,}$/'),            'idcard' =>      array('身份证号','/^[1-9]([0-9]{14}|[0-9]{17})$/'),            'chinese' =>     array('中文字符','/^[\u4e00-\u9fa5]+$/'),            'english' =>     array('英文字母','/^[A-Za-z]+$/'),            'en_num' =>      array('英文/数字/下划线组合','/^\w+$/'),            'cn_username' => array('中文/英文/数字/下划线组合','/^([\u4e00-\u9fa5]|[\w])+$/'),        );        if(!empty($value)){            if (preg_match($validator[$type][1], $value) || !in_array($type,array_keys($validator))) return true;            return false;        }        else{            return $validator;        }    }    /**读缓存文件     * @params  string  $cache_name     * @return  array   $data     */    function read_static_cache($cache_name, $dir='static')    {        if ((DEBUG_MODE & 2) == 2)return false;        static $result = array();        if (!empty($result[$cache_name]))        {            return $result[$cache_name];        }        $cache_file_path = AppDir . '/data/' . ($dir ? $dir.'/' : '') . $cache_name . '.php';        if (file_exists($cache_file_path))        {            include_once($cache_file_path);            $result[$cache_name] = $data;            return $result[$cache_name];        }        else        {            return false;        }    }    /**写缓存文件     * @param $cache_name     * @param $caches     * @return bool     */    function write_static_cache($cache_name, $caches, $dir='static')    {        if ((DEBUG_MODE & 2) == 2)return false;        $cache_file_path = AppDir . 'data/' . ($dir ? $dir.'/' : '') . $cache_name . '.php';        $content = "<?php ";        $content .= "\$data = " . var_export($caches, true) . ";";        $content .= " ?>";        file_put_contents($cache_file_path, $content, LOCK_EX);    }    /**     * 清除缓存     * @param string $type     * @param bool $return     * @return array     * $type建议使用数组，字符串兼容旧版本 return=true返回所有缓存文件列表 false直接删除     */    function clear_caches($type='', $return=false){        $file_list = array();        #所有数据缓存目录        $dirs = array(            'static'       => AppDir . 'data/static/',            'auction_cats' => AppDir . 'data/auction_cats/',            'yun_cats'     => AppDir . 'data/yun_cats/',            'mobile_cats'     => AppDir . 'data/mobile_cats/',            'crowd_cats'     => AppDir . 'data/crowd_cats/',        );        if(is_array($type)){            $dirs_keys = array_keys($dirs);            $dirs_tmp = array();            foreach($type as $v){                if(in_array($v, $dirs_keys)){                    $dirs_tmp[] = $dirs[$v];                }else{                    //独立的文件缓存                    switch($v){                        case 'bidCount':                            $file_list[] = AppDir . 'data/bidcount.php';                            break;                        case 'dbDjx':                            $file_list[] = AppDir . 'data/dbDjx.php';                            break;                        case 'yunWin':                            $file_list[] = AppDir . 'data/yunWin.php';                            break;                        case 'yun_info':                            $dirs_tmp[] = AppDir . 'data/yun_info/';                            break;                    }                }            }            $dirs = $dirs_tmp;        }else{            if(!empty($type) && isset($dirs[$type])){                $dir = $dirs[$type];                $dirs = array();                $dirs[] = $dir;            }        }        if($dirs){            foreach ($dirs AS $dir){                $folder = @opendir($dir);                if ($folder === false)continue;                while ($file = readdir($folder)){                    if ($file == '.' || $file == '..' || $file == 'index.htm' || $file == 'index.html')continue;                    if (is_file($dir . $file)){                        $file_list[] = $dir . $file;                    }                }                closedir($folder);            }        }        if($return){            return $file_list;        }else{            if($file_list){                foreach($file_list as $v){                    @unlink($v);                }            }            return count($file_list);        }    }    function check_post()    {        if(strtoupper($_SERVER['REQUEST_METHOD']) != 'POST'){ return false; }        return $this->check_referer();    }    function check_referer()    {        $refer = getUrl('referer');        $R = parse_url($refer);        if (strpos(RootUrl, $refer) !== false && strpos(RootUrl, $refer) == 0) {            return true;        }        return false;    }    /**     * 数组递归合并(覆盖方式, 非array_merge_recursive的追加方式)     * @param $arr1     * @param $arr2     * @return bool     */    function arrayCoverRecursive($arr1, $arr2)    {        $rs = $arr1;        foreach(func_get_args() as $arr)        {            if(!is_array($arr))            {                return false;            }            foreach($arr as $key=>$val)            {                $rs[$key] = isset($rs[$key]) ? $rs[$key] : array();                $rs[$key] = is_array($val) ? $this->arrayCoverRecursive($rs[$key], $val) : $val;            }        }        return $rs;    }    /**  关键词、价格资质过滤     * @param array $array array('title'=>array('name'=>'标题','content'=>'1111'))     * @param int $price     * @return array     */    function certW($array = array(), $price=0){        $data = array('error'=>0,'error_text'=>'');return $data;        if(empty($array)) $data;        $certW1 = $certW2 = $certW3 = $certW4 = $certW5 = array();        include AppDir.'data/certW1.php';        include AppDir.'data/certW2.php';        include AppDir.'data/certW3.php';        include AppDir.'data/certW4.php';        include AppDir.'data/certW5.php';        //获取价格资质        $priceLimit = 0;        if(isset($certW2['priceLimit'])){            $priceLimit = $certW2['priceLimit'];        }else{            $priceLimit = $certW1['priceLimit'];        }        //需要屏蔽的词（剔除获取资质的词）        $cert = array_diff($certW1, $certW2);        unset($cert['priceLimit']);        //需要联合资质屏蔽的词（剔除获取资质的词）        $certW3 = array_merge($certW3, $certW5);        $certL = array_diff($certW3, $certW4);        if(isset($certW4['certAll']) && $certW4['certAll'] == 1){            $certL = array();        }        //关键词资质        foreach($array as $v){            if($cert){                foreach($cert as $vo){                    if(strpos($v['content'], $vo) !== false){                        $data = array('error'=>1,'error_text'=>$v['name']."中含有关键词‘".$vo."’，需要获得专属经营资质后，联系我们开通！");                        return $data;                    }                }            }            //价格资质            if($price > $priceLimit){                if($certL){                    foreach($certL as $vo){                        if(strpos($v['content'], $vo) !== false){                            $data = array('error'=>2,'error_text'=>$v['name']."中含有关键词‘".$vo."’且价值大于".price_format($priceLimit)."，需要获得专属经营资质后，联系我们开通！");                            return $data;                        }                    }                }            }        }        return $data;    }    /**     * 加密函数     * @param string $txt 需要加密的字符串     * @param string $key 密钥     * @return string 返回加密结果     */    function encrypt($txt, $key = ''){        if (empty($txt)) return $txt;        if (empty($key)) $key = md5(AuthKey);        $chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.";        $ikey ="-x6g6ZWm2G9g_vr0Bo.pOq3kRIxsZ6rm";        $nh1 = rand(0,64);        $nh2 = rand(0,64);        $nh3 = rand(0,64);        $ch1 = $chars{$nh1};        $ch2 = $chars{$nh2};        $ch3 = $chars{$nh3};        $nhnum = $nh1 + $nh2 + $nh3;        $knum = 0;$i = 0;        while(isset($key{$i})) $knum +=ord($key{$i++});        $mdKey = substr(md5(md5(md5($key.$ch1).$ch2.$ikey).$ch3),$nhnum%8,$knum%8 + 16);        $txt = base64_encode(time().'_'.$txt);        $txt = str_replace(array('+','/','='),array('-','_','.'),$txt);        $tmp = '';        $j=0;$k = 0;        $tlen = strlen($txt);        $klen = strlen($mdKey);        for ($i=0; $i<$tlen; $i++) {            $k = $k == $klen ? 0 : $k;            $j = ($nhnum+strpos($chars,$txt{$i})+ord($mdKey{$k++}))%64;            $tmp .= $chars{$j};        }        $tmplen = strlen($tmp);        $tmp = substr_replace($tmp,$ch3,$nh2 % ++$tmplen,0);        $tmp = substr_replace($tmp,$ch2,$nh1 % ++$tmplen,0);        $tmp = substr_replace($tmp,$ch1,$knum % ++$tmplen,0);        return $tmp;    }    /**     * 解密函数     * @param $txt 需要解密的字符串     * @param string $key 密匙     * @param int $ttl     * @return mixed|null|string 字符串类型的返回结果     */    function decrypt($txt, $key = '', $ttl = 0){        if (empty($txt)) return $txt;        if (empty($key)) $key = md5(AuthKey);        $chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.";        $ikey ="-x6g6ZWm2G9g_vr0Bo.pOq3kRIxsZ6rm";        $knum = 0;$i = 0;        $tlen = @strlen($txt);        while(isset($key{$i})) $knum +=ord($key{$i++});        $ch1 = @$txt{$knum % $tlen};        $nh1 = strpos($chars,$ch1);        $txt = @substr_replace($txt,'',$knum % $tlen--,1);        $ch2 = @$txt{$nh1 % $tlen};        $nh2 = @strpos($chars,$ch2);        $txt = @substr_replace($txt,'',$nh1 % $tlen--,1);        $ch3 = @$txt{$nh2 % $tlen};        $nh3 = @strpos($chars,$ch3);        $txt = @substr_replace($txt,'',$nh2 % $tlen--,1);        $nhnum = $nh1 + $nh2 + $nh3;        $mdKey = substr(md5(md5(md5($key.$ch1).$ch2.$ikey).$ch3),$nhnum % 8,$knum % 8 + 16);        $tmp = '';        $j=0; $k = 0;        $tlen = @strlen($txt);        $klen = @strlen($mdKey);        for ($i=0; $i<$tlen; $i++) {            $k = $k == $klen ? 0 : $k;            $j = strpos($chars,$txt{$i})-$nhnum - ord($mdKey{$k++});            while ($j<0) $j+=64;            $tmp .= $chars{$j};        }        $tmp = str_replace(array('-','_','.'),array('+','/','='),$tmp);        $tmp = trim(base64_decode($tmp));        if (preg_match("/\d{10}_/s",substr($tmp,0,11))){            if ($ttl > 0 && (time() - substr($tmp,0,11) > $ttl)){                $tmp = null;            }else{                $tmp = substr($tmp,11);            }        }        return $tmp;    }}?>